<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java全面复习</title>
    <url>/posts/3778293.html</url>
    <content><![CDATA[<p>Java是一门广泛流行的<code>需求量大，入门门槛低</code>的语言，非常适合开发人员学习。</p>
<span id="more"></span>
<h2>Java入门</h2>
<p><strong>Java的特点</strong></p>
<ul>
<li>面向对象编程</li>
<li>支持分布式计算</li>
<li>可跨平台（由<code>JVM</code>负责翻译成可在不同操作系统上执行的程序）</li>
</ul>
<p><strong>JDK和JRE的区别</strong><br>
<code>JRE</code>是Java程序的运行时环境，要在计算机上运行使用Java语言编写的程序，JRE是必不可少的。JRE包含了Java虚拟机。<br>
<code>JDK</code>是Java开发工具包，包含了JRE和开发Java程序所必需的基础类库。对于Java开发人员来说，是必不可少的</p>
<p><strong>Java环境变量配置</strong></p>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_HOME</span> = <span class="string">&lt;JDK安装路径&gt;</span></span><br><span class="line"><span class="attr">CLASSPATH</span> = <span class="string">.;%JAVA_HOME%\lib</span></span><br><span class="line"><span class="attr">PATH</span> = <span class="string">;%JAVA_HOME%\bin</span></span><br></pre></td></tr></table></figure></div>
<p><strong>Java基础命令</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">javac HelloWorld.java   <span class="comment">//将java源文件编译成字节码文件（.class)</span></span><br><span class="line">java HelloWorld         <span class="comment">//使用JVM运行字节码文件</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>编译Java程序时，文件名必须和文件中唯一的<code>public类名</code>一致</p>
</blockquote>
<p><strong>Java中需要注意的几个关键字</strong></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>synchronized</td>
<td>实现线程同步</td>
</tr>
<tr>
<td>this</td>
<td>表示当前实例</td>
</tr>
<tr>
<td>super</td>
<td>表示当前类的父类</td>
</tr>
<tr>
<td>throw</td>
<td>异常</td>
</tr>
<tr>
<td>throws</td>
<td>在方法中主动抛出一个异常</td>
</tr>
</tbody>
</table>
<p>在掌握Java的基础“拳法”后，应该注意修炼“内功”。同样一套拳法，在不同人身上的效果也是不同的</p>
<p><strong>栈内存和堆内存</strong></p>
<p><code>栈内存</code>：存放变量和基本数据类型值（栈内存中只能存储数值，字符可以转换为数值）</p>
<p><code>堆内存</code>：存放引用数据类型值</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111162000.png"
                      alt="20230111162000"
                ></p>
<h2>Java多线程</h2>
<h3 id="进程和线程">进程和线程</h3>
<p><strong>进程和线程的概念</strong></p>
<p><code>进程</code>一般来讲就是计算机<mark>正在运行</mark>的一个独立的应用程序，比如QQ进程</p>
<div class="nr">
  进程是动态的，只有在应用程序运行时才会产生!
</div>
<p><code>线程</code>是组成进程的基本单位，一个进程是由一个或多个线程组成的，一个线程通常用来完成应用程序的一个特定的功能</p>
<p>进程与线程概念之间的界限不是确定的，有时一个进程可以有多个子进程，比如我们在使用IDEA工具开发SpringBoot应用时，启动的SpringBoot应用就可以看做IDEA的一个子进程，它里面又包含了读取配置文件、连接数据库、启动Tomcat等多个子线程</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230108171134.png"
                      alt="20230108171134"
                ></p>
<p><strong>进程和线程的区别</strong></p>
<p>进程拥有独立的内存空间，每个进程（QQ，微信）所占用的内存空间都是独立的，互不干扰</p>
<p>属于同一个进程的多个线程共享同一块内存空间（每个线程的执行是独立的），且线程不能脱离进程独自执行</p>
<h3 id="并发和并行">并发和并行</h3>
<p><code>并发</code>：（单核）多个线程在同一时间段内交替访问同一个共享资源，因为CPU速度太快，看起来像是多个线程在同时运行</p>
<p><code>并行</code>：（多核）多个线程在同一时间点执行，它们占用不同的CPU，相互之间没有影响，也不会争夺资源</p>
<h3 id="线程的状态">线程的状态</h3>
<p>线程共有5种状态，在特定情况下，可以相互切换</p>
<ol>
<li>创建状态：实例化一个Thread对象，还未启动时</li>
<li>就绪状态：调用start()方法完成启动，进入线程池等待CPU调度</li>
<li>运行状态：线程对象在一段时间内获得CPU资源，开始执行任务</li>
<li>阻塞状态：正在运行的线程暂停执行任务，并释放其所占用的CPU资源。解除阻塞状态的线程不能直接进入运行状态，而是重新回到就绪状态</li>
<li>终止状态：线程执行完毕或因异常终止</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230108203351.png"
                      alt="20230108203351"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230108205425.png"
                      alt="20230108205425"
                ></p>
<h3 id="什么是多线程">什么是多线程</h3>
<p><code>多线程</code>是指在一个进程中，多个线程同时并发执行。</p>
<div class="nr">
  注意这里所说的多个线程同时并发执行并不是真正地在同一时刻去执行多个线程，而是在一段时间内，多个线程交替执行，占用CPU资源。
</div>
<p>在一个类的<code>普通main()</code>方法中，无论它有多少行代码，调用了多少个方法，它都只是一个主线程。如下图所示：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230108175508.png"
                      alt="20230108175508"
                ></p>
<blockquote>
<p>多线程一定是“交替”的，而不是“顺序”的</p>
</blockquote>
<p><code>多线程</code>可以充分利用CPU资源，是从“软件”层面提升程序性能的一种主要方式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230108165737.png"
                      alt="20230108165737"
                ></p>
<h3 id="Java中的多线程">Java中的多线程</h3>
<p>在Java中使用线程的两种方式：<br>
<strong>方式一 继承Thread类</strong></p>
<ol>
<li>创建自定义类继承Thread类，该类就成了一个线程类</li>
<li>重写run()方法，定义该线程需要完成的功能</li>
<li>在主线程中实例化一个线程对象，调用其start()方法启动一个子线程</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//====在此处定义任务逻辑====</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----MyThread-----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();   <span class="comment">//开启一个线程</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="nr">
只有通过线程的start()方法来开启一个线程，该线程才能真正地成为一个线程去执行，而不能直接调用线程的run()方法，这会使线程执行变成普通的方法调用，不具备抢占CPU的能力。<br/>
当某个线程获得了CPU的调度，会自动执行其run()方法
</div>
<br/>
<div class="nr">
  上面的程序有两个线程哦，一个main()主线程，一个myThread子线程
</div>
<br/>
<p><strong>方式二 实现Runnable接口（建议）</strong></p>
<ol>
<li>创建自定义类并实现Runnable接口</li>
<li>实现接口中的run()方法，在其中编写该线程要执行的任务代码</li>
<li>创建一个Thread实例，传入任务的具体实现，启动线程即可</li>
</ol>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//====在此处定义任务逻辑====</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----MyThread-----&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        myThread.start();  <span class="comment">//开启一个线程</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在实际开发中，推荐使用第二种方式，由于Java不支持多继承，因此实现一个接口比继承一个类能使类间的耦合更低，进而提高代码重用率</p>
<p><strong>线程和任务的关系</strong><br>
线程是任务的载体，只有线程可以去抢占CPU资源，启动(start)线程后会自动执行(run)定义在其中的任务，这好比是学生和作业的关系。任务不能脱离线程独自去执行。</p>
<h3 id="线程调度（状态转换）">线程调度（状态转换）</h3>
<p><strong>线程休眠</strong><br>
通过Thread类的<code>sleep()</code>静态方法可以让一个线程暂缓执行。该方法接收一个毫秒值(ms)表示线程休眠的时间。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.sleep(<span class="number">3000</span>);    <span class="comment">//线程休眠3秒</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i+<span class="string">&quot;-----MyThread-----&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如何让主线程main()方法休眠？</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSleep</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>); <span class="comment">//休眠3秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Thread类的sleep()是一个静态方法，既可以通过类的实例调用，也可以通过<code>类名.sleep()</code>调用</p>
</blockquote>
<p><strong>线程合并</strong><br>
<code>线程合并</code>是指将某个线程加入到当前线程中，合并为一个线程。线程合并后这两个子线程将会变为顺序执行。</p>
<p>线程甲和线程乙，如果甲在一个时间点调用线程乙的join()方法（把线程乙合并到线程甲中），那么当前时间点之后CPU资源将由线程乙来独占，线程甲暂时进入阻塞状态，直到线程乙执行完毕(空参)或到达join()方法指定时间(ms)</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;-----MyThread-----&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        myThread.start();  <span class="comment">//开启一个线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    myThread.join(<span class="number">3000</span>);    <span class="comment">//加入一个子线程，在3秒内完全占用CPU资源</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>看一下输出结果，在三秒内，主线程让加入进来的MyThread子线程完全独占CPU资源</p>
<div class="highlight-container" data-rel="Console"><figure class="iseeu highlight console"><table><tr><td class="code"><pre><span class="line">main9</span><br><span class="line">-----MyThread-----0</span><br><span class="line">-----MyThread-----1</span><br><span class="line">-----MyThread-----2</span><br><span class="line">main10</span><br></pre></td></tr></table></figure></div>
<p><strong>线程礼让</strong><br>
<code>线程礼让</code>是指<mark>在某个特定的时间点</mark>，让线程暂停抢占CPU资源，暂时进入阻塞状态。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">90</span>)&#123;</span><br><span class="line">                <span class="keyword">yield</span>();    <span class="comment">//进行一次礼让</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;======&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;+++++&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        myThread.setName(<span class="string">&quot;子线程1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">myThread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        myThread2.setName(<span class="string">&quot;子线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        myThread.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>看一下执行结果，子线程1在i=90这个时间节点，做了一次礼让行为，把CPU资源让给子线程占用</p>
<div class="highlight-container" data-rel="Console"><figure class="iseeu highlight console"><table><tr><td class="code"><pre><span class="line">子线程1======89</span><br><span class="line">子线程2+++++97</span><br><span class="line">子线程2+++++98</span><br><span class="line">子线程2+++++99</span><br><span class="line">子线程1======90</span><br><span class="line">子线程1======91</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>Thread.currentThread().getName()用来获取当前线程的名称，如果没有自行设置，系统会为每个线程分配Thread-0、Thread-1这样的默认名称。</p>
</blockquote>
<p><strong>线程中断</strong></p>
<p>可以造成线程停止运行（不是暂停）的场景有</p>
<ul>
<li>线程执行完毕</li>
<li>线程在执行过程中出现了异常</li>
<li>线程在执行过程中发生了线程中断</li>
</ul>
<p>在Java中实现线程中断的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void stop()</td>
<td>强制停止当前线程。（不建议使用）</td>
</tr>
<tr>
<td>void interrupt()</td>
<td>中断当前线程</td>
</tr>
<tr>
<td>boolean isInterrupted()</td>
<td>判断当前线程是否已经中断执行（当一个线程还没有启动时返回false）</td>
</tr>
</tbody>
</table>
<p>当一个线程对象处于不同的状态时，相应的中断机制也是不同的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>();</span><br><span class="line">        System.out.println(thread.getState());  <span class="comment">//NEW</span></span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(thread.isInterrupted()); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;MyThread=====&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(thread.getState());  <span class="comment">//Runnable</span></span><br><span class="line">        thread.interrupt();     <span class="comment">//中断线程</span></span><br><span class="line">        System.out.println(thread.isInterrupted());     <span class="comment">//判断一个运行的线程是否已中断</span></span><br><span class="line">        System.out.println(thread.getState());  <span class="comment">//BLOCKED</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="线程同步">线程同步</h3>
<p>Java中允许多个线程在同一时间段内并行访问同一数据，为了应对可能导致的数据不一致问题，需要用到<code>线程同步</code>。</p>
<p>先看一个统计网站访问人数的例子:</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        num++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//线程休眠时，其他线程再访问同一数据可能带来数据错误</span></span><br><span class="line">            Thread.currentThread().sleep(<span class="number">1</span>);    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;是当前的第&quot;</span>+num+<span class="string">&quot;位访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(account,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(account,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// 张三是当前的第2位访问</span></span><br><span class="line"><span class="comment">// 李四是当前的第2位访问</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111134252.png"
                      alt="20230111134252"
                ></p>
<p>执行逻辑：张三和李四两个线程并发访问，张三执行<code>num++</code>后开始休眠，期间李四执行了<code>num++</code>也开始休眠，然后张三李四依次打印结果num都是2，而不是想象中的1和2，这就是<code>多线程共享数据时</code>可能带来的错误</p>
<div class="nr">
  表示访问人数的num必须是一个static修饰的类变量，以实现不同Account实例之间的数据共享
</div>
<br/>
<p><strong>使用线程同步解决数据冲突</strong></p>
<p>每个Java对象都有一个内置锁，这个内置锁会保护对象中使用<code>synchronized</code>关键字修饰的方法。当一个线程正在执行这个方法时，其他的线程不能调用这个方法，必须等待前一个线程结束调用。</p>
<div class="wg">
  <div class="t">
    synchronized修饰的方法好比一个带锁的厕所门，每次只允许一个线程访问，调用过程中会把门上锁，直到调用完毕。synchronized牛逼👏
  </div>
</div>
<p>我们再来看一个例子：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    SynchronizedTest.test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// end...</span></span><br></pre></td></tr></table></figure></div>
<p>为了解决这个问题，需要给目标方法test（可能多个线程同时访问）加上<code>synchronized</code>关键字。执行结果将变为：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br></pre></td></tr></table></figure></div>
<p><strong>synchronized修饰的实例方法和类方法的区别</strong></p>
<p>类方法由所有类的实例共享，实例方法每个实例都有一个。使用synchronized修饰的类方法是<code>一把锁+一个厕所</code>；synchronized修饰的实例方法是<code>多把锁+多个厕所</code>，多个实例之间互不影响</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111144010.png"
                      alt="20230111144010"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111143915.png"
                      alt="20230111143915"
                ></p>
<div class="nr">
  给实例方法添加synchronized关键字，并不能实现线程同步。把上面的test()方法修改为实例方法并通过实例调用，会发现synchronized“失效”！
</div>
<br/>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">SynchronizedTest2</span> <span class="variable">synchronizedTest2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedTest2</span>();</span><br><span class="line">                    synchronizedTest2.test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果仍为：</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// end...</span></span><br></pre></td></tr></table></figure></div>
<p>test()实例方法的synchronized是独立的，不会对其他实例造成影响。</p>
<p>🤔在统计网站访问量的例子中，我们是给实例方法run()上的锁，为何也实现了线程同步呢？这岂不是矛盾了吗？</p>
<p>其实，<code>线程同步</code>的本质是锁定多个线程所共享的资源。<mark>如果该资源在类中唯一，就可以实现线程同步。</mark></p>
<p>在统计网站访问量的例子中，run()方法操作的数据num是用static修饰的类变量，synchronized修饰的其实是num类变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 统计网站访问量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span>  <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        num++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">1</span>);    <span class="comment">//线程休眠，可能带来数据错误</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;是当前的第&quot;</span>+num+<span class="string">&quot;位访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// 张三是当前的第1位访问</span></span><br><span class="line"><span class="comment">// 李四是当前的第2位访问</span></span><br></pre></td></tr></table></figure></div>
<p><strong>如何判断线程是否同步？</strong></p>
<p>找到关键点，锁定的资源（可以是类、对象、方法、变量）在内存中是一份还是多份。如果是唯一的，就能够实现线程的同步</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronizedTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="type">SynchronizedTest2</span> <span class="variable">synchronizedTest2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SynchronizedTest2</span>();</span><br><span class="line">                    synchronizedTest2.test();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// synchronized可以锁定整个类</span></span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedTest2.class) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;end...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br><span class="line"><span class="comment">// start...</span></span><br><span class="line"><span class="comment">// end...</span></span><br></pre></td></tr></table></figure></div>
<h3 id="线程安全的单例模式">线程安全的单例模式</h3>
<p><code>单例模式</code>：一个类最多只有一个实例对象（无论new多少次）</p>
<p>如何实现单例模式：</p>
<ol>
<li>将类的构造器私有（不能随便new）</li>
<li>定义一个public类方法<code>getInstanse()</code>，返回实例对象（供外部调用获取）</li>
<li>定义类对应的static成员变量，在<code>getInstanse()</code>方法内部定义处理逻辑，只在类的static成员变量为null时创建实例对象</li>
<li>考虑到多线程情况下的线程安全问题，在<code>getInstanse()</code>方法上添加<code>synchronized</code>关键字</li>
</ol>
<p><strong>单线程下的单例模式</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo singletonDemo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了SingletonDemo对象...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singletonDemo == <span class="literal">null</span>)&#123;</span><br><span class="line">            singletonDemo = <span class="keyword">new</span> <span class="title class_">SingletonDemo</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonDemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SingletonDemo</span> <span class="variable">s</span> <span class="operator">=</span> SingletonDemo.getInstance();</span><br><span class="line">        <span class="type">SingletonDemo</span> <span class="variable">s2</span> <span class="operator">=</span> SingletonDemo.getInstance();</span><br><span class="line">        System.out.println(s == s2);    <span class="comment">//true,两个变量的内存地址指向同一实例对象</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>多线程下的单例模式（线程安全的单例模式）</strong></p>
<p>其实只要在获取类的实例对象的getInstance()方法上添加<code>synchronized</code>关键字（上锁）就可以了，保证同一时刻只有一个线程能够调用getInstance()方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo2 singletonDemo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonDemo2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建了SingletonDemo对象...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// synchronized保证线程同步</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonDemo2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singletonDemo == <span class="literal">null</span>)&#123;</span><br><span class="line">            singletonDemo = <span class="keyword">new</span> <span class="title class_">SingletonDemo2</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singletonDemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSynchronized2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程1</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">SingletonDemo2</span> <span class="variable">s</span> <span class="operator">=</span> SingletonDemo2.getInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 线程2</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">SingletonDemo2</span> <span class="variable">s2</span> <span class="operator">=</span> SingletonDemo2.getInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>优化后的线程安全的单例模式</strong></p>
<p>对上面的代码进一步优化，如果直接在方法上应用<code>synchronized</code>关键字，那么线程调用时会把整个方法锁起来，当方法中还有其他业务处理逻辑时，其他线程必须等待该线程运行完毕再去调用方法，然后才能执行方法中的其他业务，效率不高。</p>
<div class="nr">
  如果synchronized锁定的是多个线程共享的数据（同一个对象），那么线程就是安全的！
</div>
<br/>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singletonDemo == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonDemo2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singletonDemo == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singletonDemo = <span class="keyword">new</span> <span class="title class_">SingletonDemo2</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//其他业务逻辑，不受锁的影响，多个线程可以并发执行</span></span><br><span class="line">        <span class="comment">//... ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> singletonDemo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>使用 volatile 保证单例模式的绝对线程安全</strong></p>
<p><mark>工作内存中的内容是主内存中内容的副本，主内存中的数据对线程不可见，线程只对工作内存操作</mark>（这是为了保证主内存中数据的正确性，在中间加了一层工作内存）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111173434.png"
                      alt="20230111173434"
                ></p>
<p>这也带来了一个问题：可能导致线程不安全，SingletonDemo2 实例化两次。（在线程1创建一个对象并释放锁后，工作内存还未向主内存输出数据时，线程2又从主内存中复制了一份SingletonDemo2的副本，而此时SingletonDemo2还为null，线程2又重新创建了一个SingletonDemo2实例对象）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111173941.png"
                      alt="20230111173941"
                ></p>
<p>完美解决线程安全：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonDemo2 singletonDemo;</span><br></pre></td></tr></table></figure></div>
<p><code>volatile</code>：使主内存中的数据对线程可见。当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p>
<h3 id="死锁">死锁</h3>
<p>线程同步（不能争抢synchronized资源）可能带来死锁的问题。两个线程都需要两个同样资源，但都只拿到一个，等待对方执行完成，但是它们都无法继续执行。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230111183628.png"
                      alt="20230111183628"
                ></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.资源类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resources</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.模拟两个线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程号</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//static修饰保证资源在MyRunnable中唯一，锁是有效的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Resources</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resources</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Resources</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resources</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了一个资源，正在等待另一个资源&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (r1)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//这里是为了保证另一个线程可以获得其中一个资源</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (r2)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了所有资源，可以继续执行&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了一个资源，正在等待另一个资源&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (r2)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//这里是为了保证另一个线程可以获得其中一个资源</span></span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (r1)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;拿到了所有资源，可以继续执行&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 启动这两个线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        myRunnable1.num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">myRunnable2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line">        myRunnable2.num = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable1,<span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable2,<span class="string">&quot;李四&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// 张三拿到了一个资源，正在等待另一个资源</span></span><br><span class="line"><span class="comment">// 李四拿到了一个资源，正在等待另一个资源</span></span><br><span class="line"><span class="comment">// =====发生死锁，程序仍会一直运行下去=====</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>想要解除死锁，可以不让多个线程并发访问同一资源。一个线程执行完毕，另一个线程才可以运行</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable1,<span class="string">&quot;张三&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//确保线程1有足够的时间执行完毕，释放两个资源，解除死锁</span></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>); </span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(myRunnable2,<span class="string">&quot;李四&quot;</span>).start();</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown文章写作模板</title>
    <url>/posts/203dfdcf.html</url>
    <content><![CDATA[<p>这篇文章是Markdown在Redefine主题下的应用，我用他来作为一个模板（自用），方便以后查阅，不会适用所有主题哦</p>
<span id="more"></span>
<p><a class="link"   href="https://redefine-docs.ohevan.com/docs/configuration-guide/" >Redefine文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2>PicGo上传图片</h2>
<ol>
<li>win+shift+S或PrintScreen 使用Windows内置截图工具截图</li>
<li>ctrl+alt+U 从剪切板上传图像</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230106193719.png"
                      alt="20230106193719"
                ></p>
<h2>QQ截图自定义</h2>
<ol>
<li>Ctrl+Alt+I 屏幕截图</li>
<li>Ctrl+Shift+A 录屏</li>
</ol>
<h2>可选的文章头</h2>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1. 文章置顶，数字越大越靠前--&gt;</span><br><span class="line">sticky: 999   </span><br><span class="line"></span><br><span class="line">&lt;!-- 2. 摘要 --&gt;</span><br><span class="line">excerpt: 这是文章摘要的内容</span><br><span class="line"></span><br><span class="line">&lt;!-- 3. 摘要截取，截取more注释前的文本作为这篇文章的摘要 --&gt;</span><br><span class="line">&lt;!-- 优先级低于excerpt --&gt;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">margin: -28px -28px 20px -28px;</span><br><span class="line"></span><br><span class="line">&lt;!-- 4. 文章卡片缩略图 --&gt;</span><br><span class="line">thumbnail: https://evan.beee.top/img/wallhaven-wqery6-light.webp</span><br></pre></td></tr></table></figure></div>
<h2>文本</h2>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">psw</span>&gt;</span></span>隐藏文本<span class="language-xml"><span class="tag">&lt;/<span class="name">psw</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>键盘文本<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">mark</span>&gt;</span></span>高亮文本<span class="language-xml"><span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nr&quot;</span>&gt;</span></span></span><br><span class="line">  红色笔记</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br></pre></td></tr></table></figure></div>
<p><psw>隐藏文本</psw><br>
<kbd>键盘文本</kbd><br>
<mark>高亮文本</mark><br>
<u>划线文本</u></p>
<div class="nr">
  红色笔记
</div>
<br/>
<h2>表格table</h2>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line">|属性|描述|</span><br><span class="line">|----|----|</span><br><span class="line">|属性|值|</span><br></pre></td></tr></table></figure></div>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>属性</td>
<td>值</td>
</tr>
</tbody>
</table>
<h2>Emoji</h2>
<p>😀 🤪 🤣 😄 🥳 🤔 🧐<br>
🤨 😐 🙁 👉 👇 👍 👏<br>
👀 💀 👻 🙈 🎅<br>
🦆 🦢 🐧 🐤 🐌 🦀 🌱 🌴<br>
💌 💘 🎈 🎉 📢 🎀 🔖 📒<br>
🚗 🛹 ⚓ 🚢 🚀<br>
⭐ 🔥 🌈 🪶 📌 ✅ 📝<br>
🥝 🍎 🍉 🥑 🍕 🍖 🍡 🍬 🍭 🍰</p>
<p>更多emoji详见<a class="link"   href="https://www.webfx.com/tools/emoji-cheat-sheet/" >Emoji Cheat Sheet <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2>笔记</h2>
<p>取值：nr(红色)、no(橙色)、ny(黄色)、ng(绿色)、nb(蓝色)、np(紫色)、ngra(灰色)</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!---红色---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nr&quot;</span>&gt;</span></span><br><span class="line">  红色笔记</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="nr">
  红色笔记
</div>
<br/>
<h2>提示</h2>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;t&quot;</span>&gt;</span></span><br><span class="line">    提示</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="wg">
  <div class="t">
    提示
  </div>
</div>
<h2>警告</h2>
<p>取值：wr(红色)、wo(橙色)、wy(黄色)、wg(绿色)、wb(蓝色)、wp(紫色)、wgra(灰色)、</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wr&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;t&quot;</span>&gt;</span></span><br><span class="line">    警告</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c&quot;</span>&gt;</span></span><br><span class="line">    这是内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<div class="wr">
  <div class="t">
    警告
  </div>
  <div class="c">
    这是内容
  </div>
</div>
<h2>外挂标签</h2>
<div class="nr">
  尽量少在文章中使用外挂标签语法，它会降低文章的可移植性！
</div>
<h3 id="折叠框folding">折叠框folding</h3>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% folding blue,标题%&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> 标题 </summary>
              <div class='content'>
              <p>内容</p>
              </div>
            </details>
<h3 id="复选列表checkbox">复选列表checkbox</h3>
<p>取值：red,yellow,green,cyan,blue,gray</p>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 内容 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 内容 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 内容 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 内容 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 内容 %&#125;</span><br></pre></td></tr></table></figure></div>
<div class='checkbox'><input type="checkbox" />
            <p>内容</p>
            </div>
<div class='checkbox green checked'><input type="checkbox" checked="checked"/>
            <p>内容</p>
            </div>
<div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>
            <p>内容</p>
            </div>
<div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>
            <p>内容</p>
            </div>
<div class='checkbox times red checked'><input type="checkbox" checked="checked"/>
            <p>内容</p>
            </div>
<h3 id="单选列表radio">单选列表radio</h3>
<p>取值：red,yellow,green,cyan,blue,gray</p>
<div class="highlight-container" data-rel="Md"><figure class="iseeu highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% radio 内容 %&#125;</span><br><span class="line">&#123;% radio green checked, 内容 %&#125;</span><br></pre></td></tr></table></figure></div>
<div class='checkbox'><input type="radio" />
            <p>内容</p>
            </div>
<div class='checkbox green checked'><input type="radio" checked="checked"/>
            <p>内容</p>
            </div>
<h2>其他</h2>
<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sunday</span></span><br><span class="line"><span class="attr">link:</span> <span class="string">https://sblog.wyun521.top</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">代码改变世界</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">https://mysource-hexo.wyun521.top/img/avator/7.jpg</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://mysource-hexo.wyun521.top/img/avator/7.jpg"
                      alt="周杰伦"
                ></p>
<h2>Redefine指南</h2>
<p>如何升级？</p>
<ol>
<li>执行以下命令</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/redefine</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>将根目录下的<code>_config.redefine.yml</code>与主题配置文件<code>_config.yml</code>进行比对，添加新增配置项，同时手动更新配置文件末尾的版本信息</li>
</ol>
<div class="nr">
  如果你升级了 Redefine 主题，主题配置文件 /node_modules/hexo-theme-redefine/_config.yml 的 version 的值必须跟 _config.redefine.yml 版本号保持一致！!
    _config.redefine.yml 中的版本号需要你手动更改
</div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器</title>
    <url>/posts/5a8a6c8d.html</url>
    <content><![CDATA[<h3 id="基本选择器">基本选择器</h3>
<table>
<thead>
<tr>
<th>选择器</th>
<th>描述</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>标签选择器</td>
<td>通过标签名选择元素</td>
<td>div</td>
</tr>
<tr>
<td>类选择器</td>
<td>通过类名选择元素，一个类名可对应多个元素</td>
<td>.menu</td>
</tr>
<tr>
<td>id选择器</td>
<td>通过元素id属性选择元素，这个元素应该是唯一的</td>
<td>#footer</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>选择页面中的所有元素，常用来清除内外边距</td>
<td>*</td>
</tr>
</tbody>
</table>
<h3 id="相邻选择器">相邻选择器</h3>
<p>选择所有指定元素的相邻后一个兄弟节点</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1-2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p0 被选中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;good&quot;</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1 被选中<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="后代选择器">后代选择器</h3>
<p>在所有后代节点中选</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="子选择器">子选择器</h3>
<p>与后代选择器不同的是，它只在亲儿子中选</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="并集选择器">并集选择器</h3>
<p>也叫分组选择器，选择用<code>，</code>分隔的所有元素</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="交集选择器">交集选择器</h3>
<p>选择指定类名的指定元素</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="伪类选择器">伪类选择器</h3>
<p>根据元素的状态或所处 DOM 结构选择元素</p>
<ol>
<li>动态伪类选择器</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;&#125;       <span class="comment">/*链接一开始的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;&#125;    <span class="comment">/*链接访问后的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;&#125;      <span class="comment">/*光标经过链接的样式*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;&#125;     <span class="comment">/*链接被按下时的样式*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>     <span class="comment">/*:focus 用于选择获取焦点的表单元素，一般针对表单元素而言*/</span></span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span></span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>结构伪类选择器（CSS3）</li>
</ol>
<table>
<thead>
<tr>
<th>选择符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>E:first-child</td>
<td>第一个子元素 E</td>
</tr>
<tr>
<td>E:last-child</td>
<td>最后一个子元素 E</td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>第n个子元素 E</td>
</tr>
<tr>
<td>E:first-of-type</td>
<td>指定元素 E 的第一个</td>
</tr>
<tr>
<td>E:last-of-type</td>
<td>指定元素 E 的最后一个</td>
</tr>
<tr>
<td>E:nth-of-type(n)</td>
<td>指定元素 E 的第 n 个</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>nth-child</code> 先找父亲的第n个孩子，再看是否为元素 E;<br>
<code>nth-of-type</code> 是直接找第 n 个 E，忽略其他非 E 的元素</p>
</blockquote>
<p>n可以是数字（从0开始）、关键字（even，odd）、公式等</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 啥都选不到,因为元素div的第二个孩子不是p元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选到2号p标签 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="属性选择器（CSS3）">属性选择器（CSS3）</h3>
<table>
<thead>
<tr>
<th>选择符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>E[att]</td>
<td>选择具有 att 属性的 E 元素</td>
</tr>
<tr>
<td>E[att=“val”]</td>
<td>选择具有 att 属性且属性值等于 val 的 E 元素</td>
</tr>
<tr>
<td>E[att^=“val”]</td>
<td>选择具有 att 属性且属性值以 val 开头的 E 元素</td>
</tr>
<tr>
<td>E[att$=“val”]</td>
<td>选择具有 att 属性且属性值以 val 结尾的 E 元素</td>
</tr>
<tr>
<td>E[att*=“val”]</td>
<td>选择具有 att 属性且属性值含有 val 的 E 元素</td>
</tr>
</tbody>
</table>
<h3 id="伪元素选择器-CSS3">伪元素选择器(CSS3)</h3>
<p>伪元素选择器利用 CSS 创建新标签元素，而不需要 HTML 标签，从而简化 HTML 结构</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>::before</td>
<td>在元素内部前面插入内容</td>
</tr>
<tr>
<td>::after</td>
<td>在元素内部后面插入内容</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>伪元素必须有 content 属性,哪怕为&quot;&quot;</li>
<li>before 和 after 创建了一个行内元素，在 DOM 树中无法找到，故为伪元素</li>
</ul>
</blockquote>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 伪元素字体图标 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 伪元素清除浮动 */</span></span><br><span class="line"><span class="comment">/* 1、额外标签法（隔墙法） */</span></span><br><span class="line"><span class="comment">/* 在浮动元素后面添加一个块级标签（如div），并设置 clear: both */</span></span><br><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">clear</span>:both<span class="string">&quot; &gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* 2、父级元素添加overflow，将其属性值设置为 hidden、 auto 或 scroll */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* 3、父级添加after伪元素 */</span></span><br><span class="line"><span class="string">.clearfix:after &#123;</span></span><br><span class="line"><span class="string">  content: &quot;</span><span class="string">&quot;; 必须要有content属性</span></span><br><span class="line"><span class="string">  display: block; 块级元素</span></span><br><span class="line"><span class="string">  height: 0; 不要看见该元素</span></span><br><span class="line"><span class="string">  clear: both; 核心代码清除浮动</span></span><br><span class="line"><span class="string">  visibility: hidden; 不要看见该元素</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.clearfix &#123; /* IE6、 7 专有 */</span></span><br><span class="line"><span class="string">  *zoom: 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、父级元素添加双伪元素</span></span><br><span class="line"><span class="string">.clearfix:before,.clearfix:after &#123;</span></span><br><span class="line"><span class="string">  content:&quot;</span><span class="string">&quot;;</span></span><br><span class="line"><span class="string">  display:table; </span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">clearfix:after &#123;</span></span><br><span class="line"><span class="string">  clear:both;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string">clearfix &#123;</span></span><br><span class="line"><span class="string">  *zoom:1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="CSS选择器案例">CSS选择器案例</h3>
<hr>
<p>ref：</p>
<ul>
<li><a class="link"   href="https://brucecai55520.gitee.io/bruceblog/notes/h5c3/css.html" >CSS基础 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
  </entry>
  <entry>
    <title>EJS初识</title>
    <url>/posts/daec30d9.html</url>
    <content><![CDATA[<p><a class="link"   href="https://ejs.bootcss.com/" >EJS官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>EJS是一个高效的嵌入式JavaScript模板引擎。可以利用简单的JS代码去生成HTML页面</p>
<p>模板引擎是一种技术，用来分离界面（html代码）和数据（js代码）</p>
<p><strong>ejs的一般使用步骤</strong></p>
<ol>
<li>引入ejs</li>
<li>准备数据</li>
<li>解析内容，返回结果</li>
</ol>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> people = [<span class="string">&#x27;geddy&#x27;</span>, <span class="string">&#x27;neil&#x27;</span>, <span class="string">&#x27;alex&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> html = ejs.<span class="title function_">render</span>(<span class="string">&#x27;&lt;%= people.join(&quot;, &quot;); %&gt;&#x27;</span>, &#123; <span class="attr">people</span>: people &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拼接字符串和变量的三种方式对比</span></span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> desc = <span class="string">`歌手 <span class="subst">$&#123;star&#125;</span> 发新专辑了`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(desc); </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star2 = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> desc2 = <span class="string">&#x27;歌手 &#x27;</span>+ star2 +<span class="string">&#x27; 发新专辑了2&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(desc2); </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> star3 = <span class="string">&#x27;周杰伦&#x27;</span></span><br><span class="line"><span class="keyword">let</span> desc3 = ejs.<span class="title function_">render</span>(<span class="string">&#x27;歌手 &lt;%= star %&gt; 发新专辑了3&#x27;</span>,&#123;<span class="attr">star</span>: star3&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(desc3);</span><br></pre></td></tr></table></figure></div>
<p>看上去，使用ejs拼接字符串和前两种方式没有什么独特之处，反而语法有些繁琐。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
  </entry>
  <entry>
    <title>css入门教程</title>
    <url>/posts/e26fc5f5.html</url>
    <content><![CDATA[<p>前言：CSS 用于定义网页的样式，包括针对不同设备和屏幕尺寸的设计和布局。</p>
<span id="more"></span>
<h2>css基础语法</h2>
<p>CSS 规则集（rule-set）由选择器和声明块组成，如：</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<ol>
<li>选择器指向您需要设置样式的 HTML 元素。</li>
<li>声明块包含一条或多条用分号分隔的声明。多条 CSS 声明用分号分隔，声明块用花括号括起来。</li>
<li>每条声明都包含一个 CSS 属性名称和一个值，以冒号分隔。</li>
</ol>
<h2>css选择器</h2>
<p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</p>
<p>我们可以将 CSS 选择器分为五类：</p>
<ol>
<li>简单选择器（根据名称、id、类来选取元素）</li>
<li>组合器选择器（根据它们之间的特定关系来选取元素）</li>
<li>伪类选择器（根据特定状态选取元素）</li>
<li>伪元素选择器（选取元素的一部分并设置其样式）</li>
<li>属性选择器（根据属性或属性值来选取元素）</li>
</ol>
<details class="folding-tag" blue><summary> CSS元素选择器 </summary>
              <div class='content'>
              <p>元素选择器根据HTML元素名称来选择 HTML 元素。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> CSS id选择器 </summary>
              <div class='content'>
              <p>id 选择器使用 HTML 元素的 id 属性来选择特定元素。<br>元素的 id 在页面中是唯一的，因此 id 选择器用于选择一个唯一的元素！<br>要选择具有特定 id 的元素，请写一个井号（＃），后跟该元素的 id。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#para1</span> &#123; <span class="comment">/* 这条 CSS 规则将应用于 id=&quot;para1&quot; 的 HTML 元素：*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>id 名称不能以数字开头。</p></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> CSS 类选择器 </summary>
              <div class='content'>
              <p>类选择器选择有特定 class 属性的 HTML 元素。<br>如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;   <span class="comment">/*在此例中，所有带有 class=&quot;center&quot; 的 HTML 元素将为红色且居中对齐：*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><ol><li>一个HTML 元素可以引用多个类。</li><li>类名不能以数字开头</li></ol></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> CSS 通用选择器 </summary>
              <div class='content'>
              <p>通用选择器（*）选择页面上的所有的 HTML 元素。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;     <span class="comment">/*下面的 CSS 规则会影响页面上的每个 HTML 元素：*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> CSS 分组选择器 </summary>
              <div class='content'>
              <p>分组选择器选取所有具有相同样式定义的 HTML 元素。<br>分组选择器是使用,分隔的多个选择器，这些选择器是一个组，拥有同样的样式定义</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 分组前 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分组后 */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>对选择器进行分组，可以最大程度上缩减代码量，实现代码复用</p></blockquote>
              </div>
            </details>
<p>简单CSS选择器归纳</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th>举例</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>element</td>
<td>p</td>
<td>选取所有 <code>&lt;p&gt;</code> 元素。</td>
</tr>
<tr>
<td>.class</td>
<td>.intro</td>
<td>选取所有 class=“intro” 的元素。</td>
</tr>
<tr>
<td>#id</td>
<td>#firstname</td>
<td>选取 id=“firstname” 的那个元素。</td>
</tr>
<tr>
<td>*</td>
<td>*</td>
<td>选取所有元素。</td>
</tr>
<tr>
<td>element,element,…</td>
<td>div, p</td>
<td>选取所有 <code>&lt;div&gt;</code> 元素和所有 <code>&lt;p&gt;</code> 元素。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>分组选择器使用，分隔，使用空格隔开的不是分组选择器</p>
</blockquote>
<h2>css引入</h2>
<p>当浏览器读到样式表时，它将根据样式表中的信息来格式化 HTML 文档。<br>
在HTML文档中，有三种插入样式表的方法：</p>
<ol>
<li>外部 CSS</li>
<li>内部 CSS</li>
<li>行内 CSS</li>
</ol>
<h3 id="外部css">外部css</h3>
<blockquote>
<p>通过使用外部样式表，您只需修改一个文件即可改变整个网站的外观！</p>
</blockquote>
<p>外部样式在 HTML 页面 <code>&lt;head&gt;</code> 部分内的 <code>&lt;link&gt;</code> 元素中进行定义,每张 HTML 页面必须在 head 部分的 <code>&lt;link&gt;</code> 元素内包含对外部样式表文件的引用。如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>外部样式表可以在任何文本编辑器中编写，并且必须以 .css 扩展名保存。<br>
外部 .css 文件不应包含任何 HTML 标签。</p>
<p>mystyle.css</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: navy;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="内部css">内部css</h3>
<p>如果一张 HTML 页面拥有唯一的样式，那么可以使用内部样式表。</p>
<p>内部样式在 HTML 页面的 <code>&lt;head&gt;</code> 部分内的 <code>&lt;style&gt;</code> 元素中进行定义,如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: linen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: maroon;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125; </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="行内css">行内css</h3>
<p>行内样式（也称内联样式）可用于为单个元素应用唯一的样式。</p>
<p>行内样式在相关元素的 “style” 属性中定义，style 属性可包含任何 CSS 属性，如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;text-align:center;&quot;</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<p>总的来说，外部css可作用与整个网站，内部css仅针对某一特定HTML页面，行内css针对某一HTML元素。</p>
<p>在实际开发中，我们最好不要大量地使用行内css样式，这将使页面结构和样式糅杂在一起，失去了css本身的意义。</p>
<h3 id="多个样式表">多个样式表</h3>
<p>我们有这么多定义和引入css样式的方式，如果他们都为同一元素指定了样式，会使用那个呢？</p>
<p>如果在不同样式表中为同一选择器（元素）定义了一些属性，则将使用<code>最后读取</code>的样式表中的值。如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span>  <span class="comment">&lt;!-- h1 &#123;color: navy;&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果内部样式是在链接到外部样式表之后定义的，则 &lt;h1&gt; 元素将是橙色 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果在链接到外部样式表之前定义了内部样式，则 &lt;h1&gt; 元素将是深蓝色 --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>补充：行内样式具有最高优先级，并且将覆盖外部和内部样式以及浏览器默认样式。</p>
</blockquote>
<h2>css注释</h2>
<ol>
<li>html注释  <code>&lt;!--  --&gt;</code></li>
<li>css注释   <code>/* */</code></li>
</ol>
<p>注释用于解释代码,浏览器会忽略注释。</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red; <span class="comment">/* 将文字颜色设置为红色 */</span></span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这些段落将是红色的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这段文本由 CSS 设置样式。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS 注释不会在输出中显示。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2>css颜色</h2>
<p>通过css属性<code>background-color</code>、<code>color</code>、<code>border</code>,我们可以设置背景色、文本颜色、边框颜色</p>
<details class="folding-tag" blue><summary> css背景颜色 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:Tomato;&quot;</span>&gt;</span>番茄色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:Orange;&quot;</span>&gt;</span>橙色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:Violet;&quot;</span>&gt;</span>紫色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:Gray;&quot;</span>&gt;</span>灰色<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:LightGray;&quot;</span>&gt;</span>浅灰<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文本颜色 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:Tomato;&quot;</span>&gt;</span>China<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:DodgerBlue;&quot;</span>&gt;</span>China is a great country!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:MediumSeaGreen;&quot;</span>&gt;</span>China, officially the People&#x27;s Republic of China...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css边框颜色 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;border:2px solid Tomato;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;border:2px solid DodgerBlue;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;border:2px solid Violet;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<p>指定颜色可以使用预定义的颜色名称，也可以使用RGB、HEX、HSL、RGBA、HSLA 值，如：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 与颜色名称 &quot;Tomato&quot; 等同： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:rgb(255, 99, 71);&quot;</span>&gt;</span>rgb(255, 99, 71)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#ff6347;&quot;</span>&gt;</span>#ff6347<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:hsl(9, 100%, 64%);&quot;</span>&gt;</span>hsl(9, 100%, 64%)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 与颜色名称 &quot;Tomato&quot; 等同，但是有 50% 透明度： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:rgba(255, 99, 71, 0.5);&quot;</span>&gt;</span>rgba(255, 99, 71, 0.5)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;background-color:hsla(9, 100%, 64%, 0.5);&quot;</span>&gt;</span>hsla(9, 100%, 64%, 0.5)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>除了预定义的颜色名称之外，还可以使用 RGB、HEX、HSL 指定颜色，甚至可以使用 RGBA 或 HSLA 颜色值指定带透明度的颜色。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> css rgb颜色 </summary>
              <div class='content'>
              <p>在 CSS 中，可以使用下面的公式将颜色指定为 RGB 值：<br><strong>rgb(red, green, blue)</strong></p><ol><li>每个参数 (red、green 以及 blue) 定义了 0 到 255 之间的颜色强度。</li><li>要显示黑色，请将所有颜色参数设置为 0，如下所示：rgb(0, 0, 0)。</li><li>要显示白色，请将所有颜色参数设置为 255，如下所示：rgb(255, 255, 255)。</li><li>通过使用相等的红绿蓝色值，您会得到不同程度的灰色: rgb(180, 180, 180)</li></ol><p>RGBA 颜色值是具有 alpha 通道的 RGB 颜色值的扩展，它指定了颜色的不透明度。语法：<br><strong>rgba(red, green, blue, alpha)</strong></p><ol><li>alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数字。</li><li>透明是指没有颜色，而不是白色</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> css hex颜色 </summary>
              <div class='content'>
              <p>在 CSS 中，可以使用以下格式的十六进制值指定颜色：<br><strong>#rrggbb</strong></p><ol><li>rr（红色）、gg（绿色）和 bb（蓝色）是介于 00 和 ff 之间的十六进制值（与十进制 0-255 相同）。</li><li>#ff0000 显示为红色，因为红色设置为最大值（ff），其他设置为最小值（00）。</li><li>通过对红色，绿色和蓝色使用相等的值，您将获得不同程度的灰色，如: #787878  #b4b4b4</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> css hsl颜色 </summary>
              <div class='content'>
              <p>在 CSS 中，可以使用色相、饱和度和明度（HSL）来指定颜色：<br><strong>hsla(hue, saturation, lightness)</strong></p><ol><li>色相（hue）是色轮上从 0 到 360 的度数。0 是红色，120 是绿色，240 是蓝色。</li><li>饱和度（saturation）可以描述为颜色的强度，100％ 是纯色；50％ 是 50％ 灰色，但是您仍然可以看到颜色；0％ 是完全灰色，您无法再看到颜色。</li><li>亮度（lightness）指颜色的明暗程度，0％ 表示不亮（黑色），50％ 表示 50％ 亮（既不暗也不亮），100％ 表示全明（白）。</li><li>通常通过将色调和饱和度设置为 0 来定义灰色阴影，并将亮度从 0％ 到 100％ 进行调整可以得到更深/更浅的阴影：hsl(0, 0%, 47%) hsl(0, 0%, 71%)</li></ol><p>HSLA 颜色值是带有 Alpha 通道的 HSL 颜色值的扩展，它指定了颜色的不透明度。HSLA 颜色值指定为：<br><strong>hsla(hue, saturation, lightness, alpha)</strong></p><ol><li>alpha 参数是介于 0.0（完全透明）和 1.0（完全不透明）之间的数字</li></ol>
              </div>
            </details>
<blockquote>
<p>原来所有颜色都可以是红绿蓝三色的组合结果🤔，rgb颜色和hex颜色使用三色组合值，hsl使用单一颜色+饱和度+亮度确定一种颜色</p>
</blockquote>
<blockquote>
<p>css中，opacity属性可以指定元素的不透明度/透明度。取值范围为0.0（透明）-1.0（完全不透明）<br>
当使用 opacity 属性为元素背景添加透明度时，其所有子元素也会变为透明。这可能会使完全透明的元素内的文本难以阅读。如果您不希望对子元素应用不透明度，例如上面的例子，请使用 RGBA 颜色值。</p>
</blockquote>
<h2>css背景</h2>
<p>CSS 常见背景属性有</p>
<details class="folding-tag" blue><summary> background-color </summary>
              <div class='content'>
              <p>background-color属性指定元素的背景色。举例：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;  <span class="comment">/*设置页面背景色为海蓝*/</span></span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>您可以为任何 HTML 元素设置背景颜色：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> background-image </summary>
              <div class='content'>
              <p>background-image 属性指定用作元素背景的图像<br>，默认情况下，图像会重复，以覆盖整个元素。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;paper.gif&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> background-repeat </summary>
              <div class='content'>
              <p>默认情况下，background-image 属性在水平和垂直方向上都重复图像。我们可以设置background-repeat属性值为<code>repeat-x</code>、<code>repeat-y</code>、<code>no-repeat</code>来使背景图像水平重复、垂直重复、不重复(只显示一次背景图像)</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;gradient_bg.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> background-position </summary>
              <div class='content'>
              <p>background-position 属性用于指定背景图像的位置。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;     <span class="comment">/*把背景图像放在右上角，不重复显示*/</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> background-attachment </summary>
              <div class='content'>
              <p>background-attachment 属性指定背景图像是应该<code>scroll</code>滚动还是<code>fixed</code>固定的(不会随页面的其余部分一起滚动)</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 指定应该固定背景图像,当鼠标向下滚动时，背景图片一直在原地 */</span></span><br><span class="line"><span class="comment">/* fixed效果就是图片一直在屏幕上的某个位置😜 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指定背景图像应随页面的其余部分一起滚动 */</span></span><br><span class="line"><span class="comment">/* 当滚动一定程度后，背景就看不到了😐 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;tree.png&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: right top;</span><br><span class="line">  <span class="attribute">background-attachment</span>: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<p>我们也可以使用简写版的背景属性<code>background</code>，在一个属性中指定所有背景属性。如：</p>
<details class="folding-tag" blue><summary> css背景简写 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">&quot;tree.png&quot;</span>) no-repeat right top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在使用简写属性时，属性值必须按特定次序添加（可以缺失某个值）：</p><ol><li>background-color</li><li>background-image</li><li>background-repeat</li><li>background-attachment</li><li>background-position</li></ol>
              </div>
            </details>
<p>所有css背景属性如下表</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>background</td>
<td>在一条声明中设置所有背景属性的简写属性。</td>
</tr>
<tr>
<td>background-attachment</td>
<td>设置背景图像是固定的还是与页面的其余部分一起滚动。</td>
</tr>
<tr>
<td>background-clip</td>
<td>规定背景的绘制区域。</td>
</tr>
<tr>
<td>background-color</td>
<td>设置元素的背景色。</td>
</tr>
<tr>
<td>background-image</td>
<td>设置元素的背景图像。</td>
</tr>
<tr>
<td>background-origin</td>
<td>规定在何处放置背景图像。</td>
</tr>
<tr>
<td>background-position</td>
<td>设置背景图像的开始位置。</td>
</tr>
<tr>
<td>background-repeat</td>
<td>设置背景图像是否及如何重复。</td>
</tr>
<tr>
<td>background-size</td>
<td>规定背景图像的尺寸。</td>
</tr>
</tbody>
</table>
<h2>css边框</h2>
<p>CSS <code>border</code> 属性允许您指定元素边框的样式、宽度和颜色。<br>
当border-style、border-width 、border-color设置多个属性值时，规则：</p>
<ol>
<li>4个值（上，右，下，左）</li>
<li>3个值（上，右左，下）</li>
<li>2个值（上下，左右）</li>
<li>1个值（上右下左）</li>
</ol>
<details class="folding-tag" blue><summary> css边框样式 </summary>
              <div class='content'>
              <p>border-style 属性指定要显示的边框类型:</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>solid</code></td><td>定义实线边框</td></tr><tr><td><code>dotted</code></td><td>定义点线边框</td></tr><tr><td><code>dashed</code></td><td>定义虚线边框</td></tr><tr><td><code>double</code></td><td>定义双线边框</td></tr><tr><td><code>none</code></td><td>定义无边框</td></tr><tr><td><code>hidden</code></td><td>定义隐藏边框</td></tr><tr><td>groove</td><td>定义 3D 坡口边框。效果取决于 border</td></tr><tr><td>ridge</td><td>定义 3D 脊线边框。效果取决于 border</td></tr><tr><td>inset</td><td>定义 3D inset 边框。效果取决于 border</td></tr><tr><td>outset</td><td>定义 3D outset 边框。效果取决于 border</td></tr></tbody></table><p>border-style举例：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.dotted</span> &#123;<span class="attribute">border-style</span>: dotted;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.dashed</span> &#123;<span class="attribute">border-style</span>: dashed;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.solid</span> &#123;<span class="attribute">border-style</span>: solid;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.double</span> &#123;<span class="attribute">border-style</span>: double;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.none</span> &#123;<span class="attribute">border-style</span>: none;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.hidden</span> &#123;<span class="attribute">border-style</span>: hidden;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.mix</span> &#123;<span class="attribute">border-style</span>: dotted dashed solid double;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">​</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>border-style 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>此属性规定要显示的边框类型：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  ​</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;dotted&quot;</span>&gt;</span>点状边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;dashed&quot;</span>&gt;</span>虚线边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;solid&quot;</span>&gt;</span>实线边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;double&quot;</span>&gt;</span>双线边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;none&quot;</span>&gt;</span>无边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span>隐藏边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;mix&quot;</span>&gt;</span>混合边框。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">​</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>除非设置了 border-style 属性，否则其他 CSS 边框属性都不会有任何作用！</p></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> css边框宽度 </summary>
              <div class='content'>
              <p><code>border-width</code> 属性指定四个边框的宽度。</p><ol><li>可以将宽度设置为特定大小（以 px、pt、cm、em 计），也可以使用以下三个预定义值之一：thin（细边框）、medium（中等粗细边框） 或 thick（粗边框）</li><li>border-width 属性可接受一到四个值（依次对应上、右、下、左边框）</li></ol><p>border-width举例</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-width</span>: <span class="number">5px</span> <span class="number">20px</span>; <span class="comment">/* 上、下边框 5 像素，左、右边框 20 像素 🍎*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-width</span>: <span class="number">20px</span> <span class="number">5px</span>; <span class="comment">/* 上、下边框 20 像素，左、右边框 5 像素 🍉*/</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-width</span>: <span class="number">25px</span> <span class="number">10px</span> <span class="number">4px</span> <span class="number">35px</span>; <span class="comment">/* 上 25 像素、右 10 像素、下 4 像素、左 35 像素👻 */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.four</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-width</span>: thin;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>border-width 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>border-width 属性可接受一到四个值（依次对应上、右、下、左边框）：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>border-width 属性单独使用时不起作用。请首先使用 border-style 属性设置样式。</p></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> css边框颜色 </summary>
              <div class='content'>
              <p><code>border-color</code> 属性用于设置四个边框的颜色。支持使用颜色名，rgb，hex，hsl等</p><ol><li>如果未设置 border-color，则它将继承元素本来的颜色。</li><li>border-color 属性可接受一到四个值（依次对应上、右、下、左边框）</li></ol><p>border-color举例</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: green;</span></span><br><span class="line"><span class="language-css">  &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-class">.three</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-style</span>: dotted;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125; </span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span><span class="selector-class">.four</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-style</span>: solid;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-color</span>: red green blue yellow; <span class="comment">/* 上红、右绿、下蓝、左黄 */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>border-color 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>此属性规定四条边框的颜色：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>红色实线边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>绿色实线边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span>蓝色点状边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>多色的实线边框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>注释：<span class="tag">&lt;/<span class="name">b</span>&gt;</span>border-color 属性单独使用时不起作用。请首先使用 border-style 属性设置样式。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>border-color 属性单独使用时不起作用。请首先使用 border-style 属性设置样式。</p></blockquote>
              </div>
            </details>
<p>与设置背景一样，边框也支持属性的简写，可以在一个属性中指定所有单独的边框属性。</p>
<details class="folding-tag" blue><summary> css边框简写 </summary>
              <div class='content'>
              <p>border 属性是以下各个边框属性的简写属性：</p><ol><li>border-width</li><li>border-style（必需）</li><li>border-color</li></ol><p>border简写举例</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.block</span> &#123;  <span class="comment">/* 🤨这个就是markdown中区块的样式*/</span></span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">6px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<p>css也支持使用圆角边框：</p>
<details class="folding-tag" blue><summary> css圆角边框 </summary>
              <div class='content'>
              <p><code>border-radius</code> 属性用于向元素添加圆角边框,圆角边框通常使用px单位，数字越大，边框就越圆</p><p>border-radius举例：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.round1</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.round2</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.round3</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css外边距</h2>
<p>CSS margin 属性用于在任何定义的边框之外，为元素周围创建空间。</p>
<p>所有外边距属性都可以设置以下值：</p>
<ol>
<li>auto 浏览器来计算外边距</li>
<li>length 以 px、pt、cm 等单位指定外边距</li>
<li>% 指定以包含元素宽度的百分比计的外边距</li>
<li>inherit 指定应从父元素继承外边距</li>
</ol>
<p>你可以为元素每一侧单独设置外边距：margin-top（上），margin-right（右），margin-bottom（下），margin-left（左）。也可以使用外边距简写属性margin指定所有外边距属性。</p>
<p>tips: margin允许负值</p>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25px</span> <span class="number">50px</span> <span class="number">75px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> margin auto </summary>
              <div class='content'>
              <p>您可以将 margin 属性设置为 auto，以使元素在其容器中水平居中。该元素将占据指定的宽度，并且剩余空间将在左右边界之间平均分配。</p><p>tips：使用margin:auto;使元素在容器中水平居中的前提是指定了元素宽度</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> margin inherit </summary>
              <div class='content'>
              <p>您可以将 margin 属性设置为 inherit，以使元素继承父元素的外边距</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">p</span><span class="selector-class">.ex1</span> &#123;</span><br><span class="line">      <span class="attribute">margin-left</span>: inherit;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span> class=&quot;ex1&quot;&gt;本段落继承了 <span class="selector-tag">div</span> 元素的左外边距。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css外边距合并 </summary>
              <div class='content'>
              <p>外边距合并指的是，当两个<code>垂直</code>外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。如：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 两个 div 之间的外边距是 20px，而不是 30px（20px + 10px） */</span></span><br><span class="line"><span class="comment">/* #d2的上外边距会消失 */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#d1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>:<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#d2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p></blockquote>
              </div>
            </details>
<h2>css内边距</h2>
<p>CSS padding 属性用于在任何定义的边界内的元素内容周围生成空间。</p>
<p>通过 CSS，您可以完全控制内边距（填充）。有一些属性可以为元素的每一侧（上、右、下和左侧）设置内边距。</p>
<p>所有内边距属性都可以设置以下值：</p>
<ol>
<li>length 以 px、pt、cm 等单位指定内边距</li>
<li>% 指定以包含元素宽度的百分比计的内边距</li>
<li>inherit 指定应从父元素继承内边距</li>
</ol>
<blockquote>
<ol>
<li>padding不允许负值!</li>
<li>元素的内外边距是透明的，并不会遮挡后面的任何元素！</li>
<li>内边距也支持属性简写，用法和外边距相同</li>
</ol>
</blockquote>
<h2>css box-sizing</h2>
<details class="folding-tag" blue><summary> css宽度固定 </summary>
              <div class='content'>
              <p>CSS width 属性指定元素内容区域的宽度。内容区域是元素（盒模型）的内边距、边框和外边距内的部分。<br>如果元素拥有指定的宽度，则添加到该元素的内边距会添加到元素的总宽度中。这通常是不希望的结果。</p><p>如果你希望为元素添加padding后不会改变其宽度，进而影响到布局，可以令box-sizing:border-box;</p><blockquote><p>使用 box-sizing 属性可以使元素保持其宽度。如果增加内边距，则可用的内容空间会减少，而不会增大元素的宽度</p></blockquote><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* &lt;div&gt; 元素的实际宽度将是 350px（300px + 左内边距 25px + 右内边距 25px） */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 box-sizing 属性将宽度保持为 300px，无论填充量如何： */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css 宽和高</h2>
<p>height 和 width 属性分别用于设置元素的高度和宽度。</p>
<blockquote>
<p>height 和 width 属性不包括内边距、边框或外边距。它设置的是元素内边距、边框以及外边距“内”的区域的高度或宽度。<br>
元素实际宽度=width+2<em>padding+2</em>border+2*margin</p>
</blockquote>
<p>height 和 width 属性可设置如下值：</p>
<ol>
<li>auto 默认。浏览器计算高度和宽度。</li>
<li>length 以 px、cm 等定义高度/宽度。</li>
<li>% 以包含块的百分比定义高度/宽度。</li>
<li>initial  将高度/宽度设置为默认值。</li>
<li>inherit  从其父值继承高度/宽度。</li>
</ol>
<details class="folding-tag" blue><summary> max-width </summary>
              <div class='content'>
              <p>max-width 属性用于设置元素的最大宽度。</p><p>若一个div的宽度为500px，当浏览器窗口小于元素的宽度（500px）时，浏览器会将水平滚动条添加到页面，元素也会显示不完全。<br>在这种情况下，使用 max-width 能够改善浏览器对小窗口的处理。当浏览器窗口小于元素最大宽度时，元素会随着浏览器窗口的缩小而缩小（始终占满整个浏览器宽度），浏览器也不会为元素添加滚动条</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: powderblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>max-width 属性的值将覆盖 width（宽度）</p></blockquote>
              </div>
            </details>
<h2>css框（盒）模型</h2>
<p>所有 HTML 元素都可以视为方框。在 CSS 中，在谈论设计和布局时，会使用术语“盒模型”或“框模型”。</p>
<p>CSS 框模型实质上是一个包围每个 HTML 元素的框。它包括：外边距、边框、内边距以及实际的内容。</p>
<p>在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>
<ol>
<li>背景应用于由内容、内边距、边框组成的区域</li>
<li>内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。</li>
<li>外边距可以是负值，而且在很多情况下都要使用负值的外边距。</li>
</ol>
<div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightgrey;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">15px</span> solid green;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> 元素的实际宽高 </summary>
              <div class='content'>
              <p>元素的总宽度应该这样计算：<br>元素总宽度 = 宽度 + 左内边距 + 右内边距 + 左边框 + 右边框 + 左外边距 + 右外边距</p><p>元素的总高度应该这样计算：<br>元素总高度 = 高度 + 上内边距 + 下内边距 + 上边框 + 下边框 + 上外边距 + 下外边距</p>
              </div>
            </details>
<h2>css轮廓</h2>
<p>轮廓是在元素周围绘制的一条线，在边框之外，以凸显元素。</p>
<blockquote>
<p>轮廓与边框不同！轮廓是在元素边框之外绘制的，并且可能与其他内容重叠。同样，轮廓也不是元素尺寸的一部分；元素的总宽度和高度不受轮廓线宽度的影响</p>
</blockquote>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>outline-style</td>
<td>定义轮廓样式，如solid，dashed，double等</td>
</tr>
<tr>
<td>outline-color</td>
<td>定义轮廓颜色</td>
</tr>
<tr>
<td>outline-width</td>
<td>定义轮廓宽度</td>
</tr>
<tr>
<td>outline-offset</td>
<td>轮廓偏移，指定轮廓与元素的边缘或边框之间的空间</td>
</tr>
<tr>
<td>outline</td>
<td>轮廓简写</td>
</tr>
</tbody>
</table>
<blockquote>
<p>除非设置了 outline-style 属性，否则其他轮廓属性都不会有任何作用！</p>
</blockquote>
<details class="folding-tag" blue><summary> outline-width </summary>
              <div class='content'>
              <p>outline-width 属性指定轮廓的宽度，并可设置如下值之一：</p><ol><li>thin（通常为 1px）</li><li>medium（通常为 3px）</li><li>thick （通常为 5px）</li><li>特定尺寸（以 px、pt、cm、em 计）</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> outline-color </summary>
              <div class='content'>
              <p>outline-color 属性用于设置轮廓的颜色。<br>可以通过以下方式设置颜色：</p><ol><li>name - 指定颜色名，比如 “red”</li><li>HEX - 指定十六进制值，比如 “#ff0000”</li><li>RGB - 指定 RGB 值，比如 “rgb(255,0,0)”</li><li>HSL - 指定 HSL 值，比如 “hsl(0, 100%, 50%)”</li><li>invert - 执行颜色反转（无论颜色背景如何，轮廓都是可见的）</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> outline-offset </summary>
              <div class='content'>
              <p>outline-offset 属性在元素的轮廓与边框之间添加空间。元素及其轮廓之间的空间是透明的。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 本段落在边框边缘外 15 像素处有一条轮廓线 */</span></span><br><span class="line"><span class="comment">/* 背景色始终在边框之内 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">background</span>:yellow;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">outline-offset</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> outline </summary>
              <div class='content'>
              <p>outline 属性是用于设置以下各个轮廓属性的简写属性：</p><ol><li>outline-width</li><li>outline-style（必需）</li><li>outline-color</li></ol><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.ex1</span> &#123;<span class="attribute">outline</span>: dashed;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.ex2</span> &#123;<span class="attribute">outline</span>: dotted red;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.ex3</span> &#123;<span class="attribute">outline</span>: <span class="number">5px</span> solid yellow;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.ex4</span> &#123;<span class="attribute">outline</span>: thick ridge pink;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>outline 属性<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex1&quot;</span>&gt;</span>点状轮廓。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex2&quot;</span>&gt;</span>红色的点状轮廓。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex3&quot;</span>&gt;</span>5 像素的黄色实线轮廓。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;ex4&quot;</span>&gt;</span>粗的粉色凸脊轮廓。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css文本属性</h2>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>color</td>
<td>设置文本颜色。</td>
</tr>
<tr>
<td>direction</td>
<td>指定文本的方向 / 书写方向。</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>设置字符间距。</td>
</tr>
<tr>
<td>line-height</td>
<td>设置行高。</td>
</tr>
<tr>
<td>text-align</td>
<td>指定文本的水平对齐方式。</td>
</tr>
<tr>
<td>text-decoration</td>
<td>指定添加到文本的装饰效果。</td>
</tr>
<tr>
<td>text-indent</td>
<td>指定文本块中首行的缩进。</td>
</tr>
<tr>
<td>text-shadow</td>
<td>指定添加到文本的阴影效果。</td>
</tr>
<tr>
<td>text-transform</td>
<td>控制文本的大小写。</td>
</tr>
<tr>
<td>text-overflow</td>
<td>指定应如何向用户示意未显示的溢出内容。</td>
</tr>
<tr>
<td>unicode-bidi</td>
<td>与 direction 属性一起使用，设置或返回是否应重写文本来支持同一文档中的多种语言。</td>
</tr>
<tr>
<td>vertical-align</td>
<td>指定文本的垂直对齐方式。</td>
</tr>
<tr>
<td>white-space</td>
<td>指定如何处理元素内的空白。</td>
</tr>
<tr>
<td>word-spacing</td>
<td>设置单词间距。</td>
</tr>
</tbody>
</table>
<details class="folding-tag" blue><summary> css文本颜色 </summary>
              <div class='content'>
              <p>color 属性用于设置文本的颜色。颜色由以下值指定：</p><ol><li>颜色名 - 比如 “red”</li><li>十六进制值 - 比如 “#ff0000”</li><li>RGB 值 - 比如 “rgb(255,0,0)”</li></ol><p>页面的默认文本颜色可在 body 选择器中定义</p>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文本对齐 </summary>
              <div class='content'>
              <p>text-align 属性用于设置文本的水平对齐方式。<br>文本可以left左对齐或right右对齐，center居中对齐。</p><p>当 text-align 属性设置为 “justify” 后，将拉伸每一行，以使每一行具有相等的宽度，并且左右边距是直的</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* direction 和 unicode-bidi 属性可用于更改元素的文本方向 */</span></span><br><span class="line"><span class="comment">/* 这段文本会从右往左排列 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">direction</span>: rtl;</span><br><span class="line">  <span class="attribute">unicode-bidi</span>: bidi-override;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* vertical-align 属性设置元素的垂直对齐方式。本例演示如何设置文本中图像的垂直对齐方式 */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.middle</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文字装饰 </summary>
              <div class='content'>
              <p>text-decoration 属性用于设置或删除文本装饰。<br><code>text-decoration: none;</code> 通常用于从链接上删除下划线</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 带上划线的文本 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 带删除线的文本 */</span></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: line-through;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 带下划线的文本 */</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 4. 删除链接下的下划线 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文本转换 </summary>
              <div class='content'>
              <p>text-transform 属性用于指定文本中的大写和小写字母。<br>它可用于将所有内容转换为大写或小写字母，或将每个单词的首字母大写：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 英文字母全部大写 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.uppercase</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2. 英文字母全部小写 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.lowercase</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: lowercase;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3. 英文首字母大写 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.capitalize</span> &#123;</span><br><span class="line">  <span class="attribute">text-transform</span>: capitalize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文字缩进 </summary>
              <div class='content'>
              <p>text-indent 属性用于指定文本第一行的缩进长度大小（首行缩进）</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css字母间距 </summary>
              <div class='content'>
              <p>letter-spacing 属性用于指定文本中字符之间的间距。（包括中文，即单词间的距离）<br>它让段落中的文本更紧凑或更宽松</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css行高 </summary>
              <div class='content'>
              <p>line-height 属性用于指定行之间的间距（行高）<br>浏览器默认行高为110%-120%</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.small</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.big</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css字间距 </summary>
              <div class='content'>
              <p>word-spacing 属性用于指定文本中<code>单词</code>之间的间距。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">word-spacing</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css段落内部不换行 </summary>
              <div class='content'>
              <p>white-space 属性指定元素内部空白的处理方式。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 禁用元素内的文本换行 */</span></span><br><span class="line"><span class="comment">/* 段落内文本过多时也会在一行内显示 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css文本阴影 </summary>
              <div class='content'>
              <p>text-shadow 属性为文本添加阴影。<br>最简单的用法是只指定水平阴影（2px）和垂直阴影（2px），也可以设置阴影的颜色，模糊效果</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* text-shadow: 水平阴影大小 垂直阴影大小 模糊半径大小 阴影的颜色 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css字体</h2>
<details class="folding-tag" blue><summary> css通用字体 </summary>
              <div class='content'>
              <p>在 CSS 中，有五个通用字体族：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>衬线字体（Serif）</td><td>在每个字母的边缘都有一个小的笔触。它们营造出一种形式感和优雅感。</td></tr><tr><td>无衬线字体（Sans-serif）</td><td>字体线条简洁（没有小笔画）。它们营造出现代而简约的外观。</td></tr><tr><td>等宽字体（Monospace）</td><td>这里所有字母都有相同的固定宽度。它们创造出机械式的外观。</td></tr><tr><td>草书字体（Cursive）</td><td>模仿了人类的笔迹。</td></tr><tr><td>幻想字体（Fantasy）</td><td>是装饰性/俏皮的字体</td></tr></tbody></table><blockquote><p>在计算机屏幕上，无衬线字体被认为比衬线字体更易于阅读。</p></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> font-family </summary>
              <div class='content'>
              <p>在 CSS 中，我们使用 font-family 属性规定文本的字体。font-family 属性应包含多个字体名称作为“后备”系统，以确保浏览器/操作系统之间的最大兼容性。请以您需要的字体开始，并以通用系列结束</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.p1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> font-style </summary>
              <div class='content'>
              <p>font-style 属性主要用于指定斜体文本。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 正常文本 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 斜体 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.italic</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 倾斜文本 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.oblique</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: oblique;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> font-weight </summary>
              <div class='content'>
              <p>font-weight 属性指定字体的粗细</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> font-size </summary>
              <div class='content'>
              <p>font-size 属性设置文本的大小。</p><blockquote><p>如果您没有指定字体大小，则普通文本（如段落）的默认大小为 16px（16px = 1em）<br>1em 等于当前字体大小，浏览器中的默认文本大小为 16px。因此，默认大小 1em 为 16px</p></blockquote><blockquote><p>为了允许用户调整文本大小（在浏览器菜单中），许多开发人员使用 em 而不是像素</p></blockquote><p>如果您使用了像素，则仍然可以使用缩放工具来调整<code>整个页面</code>的大小</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 以像素设置字体大小 */</span></span><br><span class="line"><span class="comment">/* 使用像素设置文本大小可以完全控制文本大小 */</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.用 em 设置字体大小 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2.5em</span>; <span class="comment">/* 40px/16=2.5em */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.875em</span>; <span class="comment">/* 30px/16=1.875em */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.875em</span>; <span class="comment">/* 14px/16=0.875em */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>在网页设计中，能够管理文本大小很重要。但是，不应过度调整字体大小来使段落看起来像标题，或是使标题看起来像段落。<br>请始终使用正确的 HTML 标签，例如 <code>&lt;h1&gt;-&lt;h6&gt;</code> 用于标题，而<code>&lt;p&gt;</code>仅用于段落。</p></blockquote>
              </div>
            </details>
<details class="folding-tag" blue><summary> vw响应式字体大小 </summary>
              <div class='content'>
              <p>可以使用 vw 单位设置文本大小，它的意思是“视口宽度”（“viewport width”）。<br>视口（Viewport）是浏览器窗口的大小。 1vw = 视口宽度的 1％。如果视口为 50 厘米宽，则 1vw 为 0.5 厘米。</p><blockquote><p>设置响应式字体大小后，字体大小将随浏览器窗口大小动态改变</p></blockquote><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-size:1vw&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> font简写属性 </summary>
              <div class='content'>
              <p>为了缩短代码，也可以在一个属性中指定所有单个字体属性。<br>font 属性是以下属性的简写属性：font-style，font-variant，font-weight，font-size/line-height，font-family。其中font-size 和 font-family 的值是必需的。如果缺少其他值之一，则会使用其默认值。</p>
              </div>
            </details>
<h2>css图标</h2>
<p>向 HTML 页面添加图标的最简单方法是使用图标库，比如Font Awesome。<br>
可以将指定的<code>图标类</code>的名称添加到任何行内元素（如 <code>&lt;i&gt;</code> 或 <code>&lt;span&gt;</code>）。</p>
<blockquote>
<p>使用图标库：1.引入样式库 2.添加图标对应类名</p>
</blockquote>
<p>下面的图标库中的所有图标都是可缩放矢量，可以使用 CSS进行自定义（大小、颜色、阴影等）。</p>
<details class="folding-tag" blue><summary> Font Awesome图标 </summary>
              <div class='content'>
              <p>如需使用 Font Awesome 图标，请访问 <a href="//fontawesome.com">fontawesome</a>，登录并获取js代码添加到 HTML 页面的 <code>&lt;head&gt;</code> 部分：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://kit.fontawesome.com/yourcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-cloud&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-heart&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-car&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bars&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> Bootstrap 图标 </summary>
              <div class='content'>
              <p>如需使用 Bootstrap glyphicons，请在 HTML 页面的 <code>&lt;head&gt;</code> 部分内添加css引用：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-cloud&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-remove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-envelope&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-thumbs-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> Google 图标 </summary>
              <div class='content'>
              <p>如需使用 Google 图标，请在HTML页面的 <code>&lt;head&gt;</code> 部分中引入css样式</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>attachment<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>computer<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>traffic<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css链接</h2>
<details class="folding-tag" blue><summary> css链接按钮 </summary>
              <div class='content'>
              <p>通过 CSS，可以用不同的方式设置链接的样式。链接可以使用任何 CSS 属性（例如 color、font-family、background 等）来设置样式。</p><p>此外，可以根据链接处于什么状态来设置链接的不同样式：</p><table><thead><tr><th>链接状态</th><th>描述</th></tr></thead><tbody><tr><td>a:link</td><td>正常的，未访问的链接</td></tr><tr><td>a:visited</td><td>用户访问过的链接</td></tr><tr><td>a:hover</td><td>用户将鼠标悬停在链接上时</td></tr><tr><td>a:active</td><td>链接被点击时</td></tr></tbody></table><blockquote><p>在CSS 定义中，a:hover 必须位于a:link和 a:visited之后才能生效。a:active 必须位于 a:hover 之后才能生效。</p></blockquote><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 未被访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 已被访问的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将鼠标悬停在链接上 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: hotpink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 被选择点击的链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>我们可以设置css样式把链接变成一个链接按钮：</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* text-decoration 属性主要用于从链接中删除下划线： */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f44336</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#787878</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> css光标样式 </summary>
              <div class='content'>
              <p>cursor 属性指定要显示的光标类型。</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 把鼠标移动到单词上，以查看指针效果 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- cursor:default  默认样式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- cursor:pointer  掠过，小手样式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- cursor:text     文本编辑样式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- cursor:wait     转圈，等待样式 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:auto&quot;</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:crosshair&quot;</span>&gt;</span>crosshair<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:default&quot;</span>&gt;</span>default<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:e-resize&quot;</span>&gt;</span>e-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:help&quot;</span>&gt;</span>help<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:move&quot;</span>&gt;</span>move<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:n-resize&quot;</span>&gt;</span>n-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:ne-resize&quot;</span>&gt;</span>ne-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:nw-resize&quot;</span>&gt;</span>nw-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:pointer&quot;</span>&gt;</span>pointer<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:progress&quot;</span>&gt;</span>progress<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:s-resize&quot;</span>&gt;</span>s-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:se-resize&quot;</span>&gt;</span>se-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:sw-resize&quot;</span>&gt;</span>sw-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:text&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:w-resize&quot;</span>&gt;</span>w-resize<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;cursor:wait&quot;</span>&gt;</span>wait<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css表格</h2>
<table>
<thead>
<tr>
<th>表格属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>border</td>
<td>简写属性。在一条声明中设置所有边框属性。</td>
</tr>
<tr>
<td>border-collapse</td>
<td>规定是否应折叠表格边框。</td>
</tr>
<tr>
<td>border-spacing</td>
<td>规定相邻单元格之间的边框的距离。</td>
</tr>
<tr>
<td>caption-side</td>
<td>规定表格标题的位置。</td>
</tr>
<tr>
<td>empty-cells</td>
<td>规定是否在表格中的空白单元格上显示边框和背景。</td>
</tr>
<tr>
<td>table-layout</td>
<td>设置用于表格的布局算法。</td>
</tr>
</tbody>
</table>
<details class="folding-tag" blue><summary> css表格 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 全宽表格 占满整个屏幕 */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 半宽的表格 */</span></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 单元格内文本水平居中对齐 */</span></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 垂直对齐方式 默认居中 */</span></span><br><span class="line"><span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置表格内容与边框之间的距离 */</span></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标掠过时，突出显示某一行 */</span></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 响应式表格，用div包裹并设置样式为overflow-x:auto; */</span></span><br><span class="line"><span class="comment">/* 如果屏幕太小而无法显示全部内容，则响应式表格会显示水平滚动条 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">overflow-x</span>:auto;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="selector-tag">table</span>&gt;</span><br><span class="line">        <span class="selector-tag">table</span> <span class="attribute">content</span> </span><br><span class="line">  &lt;/<span class="selector-tag">table</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置表格标题的位置 表格下方 */</span></span><br><span class="line"><span class="selector-tag">caption</span> &#123;</span><br><span class="line">  <span class="attribute">caption-side</span>: bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<h2>css布局*</h2>
<details class="folding-tag" blue><summary> display </summary>
              <div class='content'>
              <p>display 属性是用于控制布局的最重要的 CSS 属性</p><p>display 属性规定是否/如何显示元素。</p><p>每个 HTML 元素都有一个默认的 display 值，具体取决于它的元素类型。大多数元素的默认 display 值为 block 或 inline</p><p>块级元素（block element）和行内元素（inline element）</p><ol><li>块级元素总是从新行开始，并占据可用的全部宽度（尽可能向左和向右伸展）</li><li>内联元素不从新行开始，仅占用所需的宽度。</li></ol><table><thead><tr><th>元素</th><th>所属类别</th></tr></thead><tbody><tr><td><code>&lt;div&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;h1&gt;-&lt;h6&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;p&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;form&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;header&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;section&gt;</code></td><td>块级元素</td></tr><tr><td><code>&lt;span&gt;</code></td><td>行内元素</td></tr><tr><td><code>&lt;a&gt;</code></td><td>行内元素</td></tr><tr><td><code>&lt;img&gt;</code></td><td>行内元素</td></tr></tbody></table><p>如前所述，每个元素都有一个默认 display 值。但是，您可以覆盖它。将行内元素更改为块元素，反之亦然。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 为实现水平导航菜单而生成行内的 &lt;li&gt; 元素 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 把链接显示为块元素，独占一行 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 值为 &quot;block&quot; 的 display 属性会导致两元素间的换行 */</span></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><blockquote><p>设置元素的 display 属性仅会更改元素的显示方式，而不会更改元素的种类。因此，带有 display: block; 的行内元素不允许在其中包含其他块元素。</p></blockquote><blockquote><p>关于隐藏元素：display指定应如何显示元素，<br>visibility指定元素是否应该可见。 %}</p></blockquote><ol><li>display: none; 元素将被隐藏，并且页面将显示为好像该元素不在其中</li><li>visibility:hidden; 元素将被隐藏，但仍会影响布局，该元素仍将占用与之前相同的空间</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> width、max-width、margin: auto; </summary>
              <div class='content'>
              <p>块级元素始终占用可用的全部宽度（尽可能向左和向右伸展）。<br>设置块级元素的 width 将防止其延伸到其容器的边缘。然后，您可以将外边距设置为margin: auto;，以将元素<code>在其容器中</code>水平居中。元素将占用指定的宽度，剩余空间将在两个外边距之间平均分配</p><p>width和max-width的区别：</p><ol><li>width  当浏览器窗口小于元素的宽度时，浏览器会将水平滚动条添加到页面。（元素始终保持一定宽度，不灵活，会导致元素显示不完全）</li><li>max-width  当浏览器窗口小于元素的宽度时，元素宽度会动态地相应减少（等于窗口大小），元素中的内容自动适配（比如换行）。这种方式非常有利于网站在小型设备上使用，很灵活</li></ol><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将浏览器窗口拖动到小于500px的宽度,查看效果*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.ex1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.ex2</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> position + left|right|top|bottom </summary>
              <div class='content'>
              <p><kbd>position</kbd>属性规定应用于元素的定位方法的类型（static、relative、fixed、absolute 或 sticky）。<br>元素其实是使用 <code>top、bottom、left 和 right</code> 属性定位的。但是，除非首先设置了 position 属性，否则这些属性将不起作用。根据不同的 position 值，它们的工作方式也不同。</p><table><thead><tr><th>position</th><th>描述</th></tr></thead><tbody><tr><td>position: static;</td><td>HTML元素默认的定位方式,始终根据页面的正常流进行定位。静态定位的元素不受 top、bottom、left 和 right 属性的影响。</td></tr><tr><td>position: relative;</td><td>元素相对于其<emp>正常位置</emp>进行定位</td></tr><tr><td>position: fixed;</td><td>元素相对于<emp>视口</emp>定位，这意味着即使滚动页面，它也始终位于同一位置。</td></tr><tr><td>position: absolute;</td><td>元素相对于<emp>最近的定位祖先元素</emp>进行定位。如果绝对定位的元素没有祖先，它将使用文档主体（body），并随页面滚动一起移动。</td></tr><tr><td>position: sticky;</td><td>粘性元素根据滚动位置在相对（relative）和固定（fixed）之间切换。起先它会被相对定位，直到在视口中遇到给定的偏移位置后“粘贴”在适当的位置</td></tr></tbody></table><p>tips: top、bottom、left、right将根据定位方法分别设置定位框元素顶部、底部、左部、右部的距离（外边距）<br>tips: 绝对定位时“被定位的”元素是其位置除 static 以外的任何元素。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置 position: static; 的元素不会以任何特殊方式定位；它是始终根据页面的正常流进行定位 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.static</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div相对于原来位置向右偏移了30px */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* div在右下方固定显示 */</span></span><br><span class="line"><span class="comment">/* 滚动页面，也不会改变其位置 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.father</span><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.child</span><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 粘性定位，先相对后固定 */</span></span><br><span class="line"><span class="comment">/* 在到达其滚动位置（将要从页面中消失）时，sticky 元素将停留在页面顶部（top: 0） */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: -webkit-sticky;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#cae8ca</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#4CAF50</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>我们经常需要居中文本在图像中央</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 图片居中文本 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 图片占满容器，包含文本的div在容器中绝对定位top:50%，宽度占满容器，文本在div中水平居中对齐 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.center</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123; </span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/i/logo/w3logo-2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;W3School&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;450&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>星期天的博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> z-index </summary>
              <div class='content'>
              <p>在对元素进行定位时，它们可以与其他元素重叠。</p><p><kbd>z-index</kbd> 属性指定元素的堆栈顺序（哪个元素应放置在其他元素的前面或后面）。之所以叫z-index，是因为z指屏幕到用户的距离</p><p>具有较高堆叠顺序的元素始终位于具有较低堆叠顺序的元素之前。如果两个定位的元素重叠而未指定 z-index，则位于 HTML 代码中最后的元素将显示在顶部。</p><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 图像在文本下方显示 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> overflow </summary>
              <div class='content'>
              <p>overflow指定如果内容溢出元素框时的处理方式<br>overflow-x 和 overflow-y 属性规定是仅水平还是垂直地（或同时）更改内容的溢出</p><table><thead><tr><th>overflow</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>（默认）溢出内容不会被剪裁，而是在元素框外渲染</td></tr><tr><td>hidden</td><td>溢出被剪裁，其余内容将不可见</td></tr><tr><td>scroll</td><td>溢出被剪裁，同时添加滚动条以查看其余内容(即使没有溢出也会添加滚动条)</td></tr><tr><td>auto</td><td>与scroll类似，但仅在必要时添加滚动条</td></tr></tbody></table><blockquote><p>overflow 属性仅适用于具有指定高度的块元素！</p></blockquote><div class="highlight-container" data-rel="Css"><figure class="iseeu highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 溢出会被裁剪，其余内容被隐藏 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 溢出将被裁剪，并添加水平和垂直滚动条以便在框内滚动 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden; <span class="comment">/* 隐藏水平滚动栏 */</span></span><br><span class="line">  <span class="attribute">overflow-y</span>: scroll; <span class="comment">/* 添加垂直滚动栏 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> float </summary>
              <div class='content'>
              <p>CSS float 属性规定元素如何浮动。<br>CSS clear 属性规定哪些元素可以在清除的元素旁边以及在哪一侧浮动。</p><table><thead><tr><th>float</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素浮动到其容器的左侧</td></tr><tr><td>right</td><td>元素浮动在其容器的右侧</td></tr><tr><td>none</td><td>元素不会浮动（将显示在文本中刚出现的位置）。默认值。</td></tr><tr><td>inherit</td><td>元素继承其父级的 float 值</td></tr></tbody></table><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在本例中，图像会在段落中向右浮动，而段落中的文本会包围这幅图像 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/i/logo/w3logo-3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;W3School&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:170px;height:170px;margin-left:15px;&quot;</span>&gt;</span></span><br><span class="line">  领先的 Web 技术教程 - 全部免费。在 W3School，你可以找到你所需要的所有的网站建设教程。从基础的 HTML 到 CSS，乃至进阶的 XML、SQL、JS、PHP。</span><br><span class="line">  我们的参考手册涵盖了网站技术的方方面面。其中包括W3C标准技术：HTML、CSS、XML 。以及其他技术，诸如 JavaScript、PHP、SQL 等。</span><br><span class="line">  在 W3School，我们提供上千个实例。通过使用我们的在线编辑器，你可以编辑这些例子，并对代码进行实验。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> clear </summary>
              <div class='content'>
              <p>clear 属性用于清除元素周围的浮动元素（指定哪些元素可以浮动于被清除元素的旁边以及哪一侧）</p><table><thead><tr><th>clear</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>允许元素两侧都有浮动元素（默认）</td></tr><tr><td>left</td><td>左侧不允许浮动元素</td></tr><tr><td>right</td><td>右侧不允许浮动元素</td></tr><tr><td>both</td><td>左侧或右侧均不允许浮动元素</td></tr><tr><td>inherit</td><td>元素继承其父级的 clear 值</td></tr></tbody></table><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 由于div1左浮动，div2中的文本将跑到div1周围 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* div3的左浮动被清除，div4仍在其下方显示 */</span></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#73AD21</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.div4</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>不使用 clear<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2 - 请注意，在 HTML 代码中 div2 在 div1 之后。不过，由于 div1 向左浮动，div2 中的文本会流动到 div1 周围。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>使用 clear<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div4&quot;</span>&gt;</span>div4 - 在此处，clear: left; 把 div4 移动到浮动的 div3 下方。值 &quot;left&quot; 会清除向左浮动的元素。您也可以清除 &quot;right&quot; 和 &quot;both&quot;。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<hr>
<p>参考文章：<br>
<a class="link"   href="https://crazywong.com/posts/css-basic-review/" >1.5 万字 CSS 基础拾遗（核心知识、常见需求） <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2>Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server">Run server</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>vsCode快捷键整理</title>
    <url>/posts/39b2c7e1.html</url>
    <content><![CDATA[<p>前言：总结了一些VsCode个人觉得常用的快捷键</p>
<!-- more -->
<h2>行操作</h2>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+C</td>
<td>复制该行</td>
</tr>
<tr>
<td>ctrl+X</td>
<td>剪切该行</td>
</tr>
<tr>
<td>ctrl+shift+K</td>
<td>删除行</td>
</tr>
<tr>
<td>alt+上/下</td>
<td>移动行</td>
</tr>
<tr>
<td>shift+alt+上/下</td>
<td>复制行</td>
</tr>
<tr>
<td>ctrl+enter</td>
<td>插入空行</td>
</tr>
<tr>
<td>fn+home/end</td>
<td>将光标移动到行首/行尾</td>
</tr>
<tr>
<td>ctrl+fn+home/end</td>
<td>将光标移动到文档首/文档尾</td>
</tr>
<tr>
<td>ctrl+上/下</td>
<td>向上/下按行滚动</td>
</tr>
<tr>
<td>ctrl+/</td>
<td>单行注释</td>
</tr>
<tr>
<td>shift+alt+A</td>
<td>多行注释</td>
</tr>
</tbody>
</table>
<h2>导航</h2>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>alt+左/右</td>
<td>返回/前进</td>
</tr>
<tr>
<td>ctrl+P</td>
<td>转到某文件</td>
</tr>
<tr>
<td>ctrl+G</td>
<td>转到某行</td>
</tr>
</tbody>
</table>
<h2>查找替换</h2>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+F</td>
<td>查找</td>
</tr>
<tr>
<td>ctrl+H</td>
<td>替换</td>
</tr>
<tr>
<td>alt+enter</td>
<td>选择查找的所有匹配项</td>
</tr>
</tbody>
</table>
<h2>文件操作</h2>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+N</td>
<td>新建文件</td>
</tr>
<tr>
<td>ctrl+S</td>
<td>保存文件</td>
</tr>
<tr>
<td>ctrl+O</td>
<td>打开文件</td>
</tr>
</tbody>
</table>
<h2>其他</h2>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>shift+alt+鼠标</td>
<td>框选择</td>
</tr>
<tr>
<td>ctrl+W</td>
<td>关闭当前编辑器</td>
</tr>
<tr>
<td>ctrl+Tab</td>
<td>切换编辑器</td>
</tr>
<tr>
<td>ctrl++</td>
<td>放大</td>
</tr>
<tr>
<td>ctrl±</td>
<td>缩小</td>
</tr>
<tr>
<td>ctrl+shift+V</td>
<td>打开或关闭markdown预览</td>
</tr>
<tr>
<td>ctrl+\</td>
<td>打开集成终端</td>
</tr>
<tr>
<td>ctrl+shift+</td>
<td>打开新的集成终端</td>
</tr>
</tbody>
</table>
<br/>
<div class="nr">
  Ctrl+M后，Tab键原本缩进功能失效，变成了切换焦点的功能！
不要怕，再次点击Ctrl+M可找回Tab
</div>
]]></content>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML回顾</title>
    <url>/posts/f05c05c2.html</url>
    <content><![CDATA[<p><a class="link"   href="https://www.w3school.com.cn/html/html_quick.asp" >HTML速查手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2>HTML初识</h2>
<p>HTML超文本标记语言 (Hyper Text Markup Language) 是用来描述网页的一种语言。</p>
<p>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示HTML标签，而是使用标签来解释页面的内容</p>
<p>HTML元素=HTML开始标签+元素内容+HTML结束标签（元素内容可以是另一个HTML元素）</p>
<div class="tag link"><a class="link-card" title="HTML标签参考手册" href="https://www.w3school.com.cn/tags/index.asp"><div class="left"><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/favicon.png"
                     
                ></div><div class="right"><p class="text">HTML标签参考手册</p><p class="url">https://www.w3school.com.cn/tags/index.asp</p></div></a></div>
<p>对于 HTML，您无法通过在 HTML 代码中添加额外的空格或换行来改变输出的效果。当显示页面时，浏览器会移除源代码中多余的空格和空行。所有连续的空格或空行都会被算作一个空格。需要注意的是，HTML 代码中的所有连续的空行（换行）也被显示为一个空格。</p>
<ol>
<li>text-align 属性规定了元素中文本的水平对齐方式</li>
<li>&lt;bdo&gt; 定义文字的方向,属性dir=ltr(从左往右)、rtl(从右往左)</li>
</ol>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;b&gt;</code></td>
<td>定义粗体</td>
</tr>
<tr>
<td><code>&lt;i&gt;</code></td>
<td>定义斜体</td>
</tr>
<tr>
<td><code>&lt;big&gt;</code></td>
<td>定义大号文本</td>
</tr>
<tr>
<td><code>&lt;small&gt;</code></td>
<td>定义小号文本</td>
</tr>
<tr>
<td><code>&lt;em&gt;</code></td>
<td>定义着重文本</td>
</tr>
<tr>
<td><code>&lt;ins&gt;</code></td>
<td>插入文本</td>
</tr>
<tr>
<td><code>&lt;del&gt;</code></td>
<td>删除文本</td>
</tr>
<tr>
<td><code>&lt;pre&gt;</code></td>
<td>定义预格式文本，会保留其中的空格和换行（代码段）</td>
</tr>
<tr>
<td><code>&lt;code&gt;</code></td>
<td>计算机代码</td>
</tr>
<tr>
<td><code>&lt;kbd&gt;</code></td>
<td>键盘码</td>
</tr>
<tr>
<td><code>&lt;bdo&gt;</code></td>
<td>定义文字方向</td>
</tr>
<tr>
<td><code>&lt;blockquote&gt;</code></td>
<td>定义长引用（区块）</td>
</tr>
<tr>
<td><code>&lt;q&gt;</code></td>
<td>定义短引用（加引号）</td>
</tr>
</tbody>
</table>
<p>统一示例</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.文本格式化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>This text is bold<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>This text is strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>This text is italic<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>This text is small<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>Computer code<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Keyboard input<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span> <span class="attr">dir</span>=<span class="string">&quot;rtl&quot;</span>&gt;</span></span><br><span class="line">Here is some Hebrew text</span><br><span class="line"><span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">for i = 1 to 10</span><br><span class="line">     print i</span><br><span class="line">next i</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">这是长的块引用</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span></span><br><span class="line">这是短的块引用</span><br><span class="line"><span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span> <span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>引入外部CSS样式与JS：</p>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性可选 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;myscript.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> HTML超链接 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 站内链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/random.html&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 外部链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>&gt;</span>链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &quot;链接文本&quot; 不必一定是文本。图片或其他 HTML 元素都可以成为链接。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/random.html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://mysource-hexo.wyun521.top/img/cover/1.jpg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 锚链接（文档内的跳转） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 您可以使用 id 属性来替代 name 属性，命名锚同样有效。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 假如浏览器找不到已定义的命名锚，那么就会定位到文档的顶端。不会有错误发生。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- (1) 在同一个文档中创建指向该锚的链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>有用的提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- (2) 在其他页面中创建指向该锚的链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://blog.wyun521.top/posts/f05c05c2/#tips&quot;</span>&gt;</span>有用的提示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>请始终将正斜杠添加到子文件夹。假如这样书写链接：<code>href=&quot;http://www.w3school.com.cn/html&quot;</code>，就会向服务器产生两次 HTTP 请求。这是因为服务器会添加正斜杠到这个地址，然后创建一个新的请求：<code>href=&quot;http://www.w3school.com.cn/html/&quot;</code></p><p>正确的做法是<code>href=&quot;http://www.w3school.com.cn/html/&quot;</code></p>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML图片 </summary>
              <div class='content'>
              <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 背景图片 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- gif和jpg文件均可用作 HTML 背景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">&quot;/i/eg_background.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 插入图片 src属性指向图片的url地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/i/eg_mouse.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一张图片&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;该图片无法显示&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>假如某个 HTML 文件包含十个图像，那么为了正确显示这个页面，需要加载 11 个文件。加载图片是需要时间的，所以我们的建议是：慎用图片。</p><p>请始终对图像使用alt属性，当图像无法显示时该属性很重要。<br>请始终定义图像尺寸。这样做会减少闪烁，因为浏览器会在图像加载之前为图像预留空间。</p>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML表格 </summary>
              <div class='content'>
              <table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td>定义表格</td></tr><tr><td><code>&lt;tr&gt;</code></td><td>行</td></tr><tr><td><code>&lt;td&gt;</code></td><td>列，单元格</td></tr><tr><td><code>&lt;th&gt;</code></td><td>表头单元格</td></tr><tr><td><code>&lt;caption&gt;</code></td><td>表格标题</td></tr></tbody></table><p>表格属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>border</td><td>表格边框</td></tr><tr><td>cellpadding</td><td>单元格内容与边框距离</td></tr><tr><td>cellspacing</td><td>单元格之间的距离（内边框大小）</td></tr><tr><td>background</td><td>表格背景</td></tr></tbody></table><p>单元格属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>colspan</td><td>单元格跨列</td></tr><tr><td>rowspan</td><td>单元格跨行</td></tr><tr><td>align</td><td>单元格中的内容对齐方式,left默认</td></tr></tbody></table><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>员工统计表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>rose<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>456789<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML列表 </summary>
              <div class='content'>
              <table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;ul&gt;</code></td><td>无序列表</td></tr><tr><td><code>&lt;ol&gt;</code></td><td>有序列表</td></tr><tr><td><code>&lt;li&gt;</code></td><td>列表项</td></tr><tr><td><code>&lt;dl&gt;</code></td><td>自定义列表</td></tr><tr><td><code>&lt;dt&gt;</code></td><td>自定义列表项</td></tr><tr><td><code>&lt;dd&gt;</code></td><td>自定义列表项描述</td></tr><tr><td>-</td><td>-</td></tr><tr><td><code>type</code></td><td>类型，会改变列表项前的符号</td></tr></tbody></table><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 无序列表 type实心圆点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 有序列表 type罗马字符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;I&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>桔子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3. 自定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>一种水果<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>这是喝的<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 4.嵌套的列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>咖啡<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>茶</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>红茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>绿茶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>牛奶<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML块元素与行内元素 </summary>
              <div class='content'>
              <p>块元素举例 <kbd><code>&lt;h1&gt; &lt;p&gt; &lt;ul&gt; &lt;table&gt; &lt;div&gt;</code></kbd><br>行内元素举例 <kbd><code>&lt;b&gt; &lt;td&gt; &lt;a&gt; &lt;img&gt; &lt;span&gt;</code></kbd></p><p>类名与id：</p><ol><li>同一个类名可以由多个HTML元素使用，id 属性的值在HTML文档中必须是唯一的</li><li>CSS和JavaScript可使用id和class属性来选取元素或设置特定元素的样式</li></ol>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML iframe子窗口 </summary>
              <div class='content'>
              <p>iframe 用于在网页内显示网页</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;/tags/iframe.html&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2. 在iframe中打开链接的HTML文档 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iframe 可用作链接的目标,前提是链接的 target 属性必须引用 iframe 的 name 属性 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;/example/html/demo_iframe.html&quot;</span> <span class="attr">name</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://mysource-hexo.wyun521.top/img/cover/1.jpg&quot;</span> <span class="attr">target</span>=<span class="string">&quot;iframe_a&quot;</span>&gt;</span>在子窗口查看链接的图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 由于链接的目标匹配 iframe 的名称，所以链接会在 iframe 中打开 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML header头部 </summary>
              <div class='content'>
              <p><code>&lt;head&gt;</code> 元素是所有头部元素的容器。以下标签都可以添加到header部分：<code>&lt;title&gt;、&lt;base&gt;、&lt;link&gt;、&lt;meta&gt;、&lt;script&gt;、&lt;style&gt;</code></p><ol><li>base标签用于统一定义本文档所有链接的打开方式，默认地址等</li><li>meta标签提供关于HTML文档的元数据，包括页面的描述、关键词、文档的作者、最后修改时间等</li><li>title标签定义文档的标题，用于：<ul><li>定义浏览器工具栏中的标题</li><li>提供页面被添加到收藏夹时显示的标题</li><li>显示在搜索引擎结果中的页面标题</li></ul></li><li>link标签定义文档与外部资源之间的关系，常用来引入外部CSS文件</li><li>style标签用于为HTML文档定义样式</li><li>script标签用于定义客户端脚本，如JavaScript。</li></ol><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=gb2312&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;zh-cn&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;w3school.com.cn&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML examples&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, HTML5,XHTML&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- base在新窗口打开链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;base href=&quot;http://www.w3school.com.cn/images/&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>这个连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 将在新窗口中加载，因为 target 属性被设置为 &quot;_blank&quot;。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.w3school.com.cn&quot;</span>&gt;</span>这个连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 也将在新窗口中加载，即使没有 target 属性。</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>为了正确显示 HTML 页面，Web 浏览器必须知道页面中使用的字符集:</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 Syntax and Coding Style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>tips: UTF-8 则是 HTML 中的默认字符集<br>tips：为了确保恰当的解释，以及正确的搜索引擎索引，在文档中对语言和字符编码的定义越早越好</p>
              </div>
            </details>
<details class="folding-tag" blue><summary> 网站布局和H5新语义元素 </summary>
              <div class='content'>
              <p>我们可以使用div+float属性实现网页基础布局：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:<span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">5px</span>;	      </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#section</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">10px</span>;	 	 </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>:<span class="number">5px</span>;	 	 </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>City Gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        London<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Paris<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Tokyo<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            London is the capital city of England. It is the most populous city in the United Kingdom,</span><br><span class="line">            with a metropolitan area of over 13 million inhabitants.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Standing on the River Thames, London has been a major settlement for two millennia,</span><br><span class="line">            its history going back to its founding by the Romans, who named it Londinium.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        Copyright ? W3Schools.com</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>在H5中，我们可以使用新的语义元素代替div标签来定义网页的不同部分:</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>header</td><td>定义文档或节的页眉</td></tr><tr><td>nav</td><td>定义导航链接的容器</td></tr><tr><td>main</td><td>规定文档的主内容。</td></tr><tr><td>section</td><td>定义文档中的节，有主题的内容组</td></tr><tr><td>article</td><td>定义独立的文章，可以独立于网站其他内容进行阅读</td></tr><tr><td>aside</td><td>定义内容之外的内容（比如侧栏）</td></tr><tr><td>footer</td><td>定义文档或节的页脚</td></tr><tr><td>details</td><td>定义用户能够查看或隐藏的额外细节</td></tr><tr><td>summary</td><td>定义details元素的可见标题</td></tr><tr><td>time</td><td>定义日期和时间</td></tr><tr><td>figure</td><td>规定自包含内容，比如图示、图表、照片、代码清单等。</td></tr><tr><td>figcaption</td><td>定义figure元素的标题。</td></tr><tr><td>mark</td><td>定义重要的或强调的文本。</td></tr></tbody></table><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">5px</span>;	 </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>:<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:<span class="number">#eeeeee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">5px</span>;	      </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>:<span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">10px</span>;	 	 </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>:both;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>:center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">5px</span>;	 	 </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>City Gallery<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        London<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Paris<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Tokyo<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            London is the capital city of England. It is the most populous city in the United Kingdom,</span><br><span class="line">            with a metropolitan area of over 13 million inhabitants.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            Standing on the River Thames, London has been a major settlement for two millennia,</span><br><span class="line">            its history going back to its founding by the Romans, who named it Londinium.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        Copyright W3Schools.com</span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>H5之前，开发者会使用他们喜爱的属性名来设置页面元素的样式：<br>header, top, bottom, footer, menu, navigation, main, container, content, article, sidebar, topnav, …</p><p>如此，浏览器便无法识别正确的网页内容。<br>而H5语义元素的使用，统一了页面元素名称，让HTML文档的可重用性和可移植性进一步增强</p>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML字符和符号 </summary>
              <div class='content'>
              <ol><li>html字符实体</li></ol><p>在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）</p><p>字符实体语法</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">&amp;entity_name;  如<span class="symbol">&amp;lt;</span></span><br><span class="line">&amp;#entity_number;  如<span class="symbol">&amp;#60;</span></span><br></pre></td></tr></table></figure></div><p>我们最常用的字符实体是<code>&amp;nbsp;</code>,它代表一个空格，该空格不会被浏览器删除或截断。其它的还有<code>&amp;copy;</code>、<code>&amp;lt</code>、<code>%gt</code>等，完整请参考：<br><a class="link"   href="https://www.w3school.com.cn/charsets/ref_html_8859.asp" >HTML实体符号参考手册 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><ol start="2"><li>emoji符号</li></ol><p>下表列出了utf-8中的一些emoji符号</p><table><thead><tr><th>字符实体</th><th>emoji</th></tr></thead><tbody><tr><td><code>&amp;#128507;</code></td><td>🗻</td></tr><tr><td><code>&amp;#128508;</code></td><td>🗼</td></tr><tr><td><code>&amp;#128509;</code></td><td>🗽</td></tr><tr><td><code>&amp;#128510;</code></td><td>🗾</td></tr><tr><td><code>&amp;#128511;</code></td><td>🗿</td></tr><tr><td><code>&amp;#128512;</code></td><td>😀</td></tr><tr><td><code>&amp;#128513;</code></td><td>😁</td></tr><tr><td><code>&amp;#128514;</code></td><td>😂</td></tr><tr><td><code>&amp;#128515;</code></td><td>😃</td></tr><tr><td><code>&amp;#128516;</code></td><td>😄</td></tr><tr><td><code>&amp;#128517;</code></td><td>😅</td></tr></tbody></table><ol start="3"><li>字符集</li></ol><p>为了正确显示 HTML 页面，Web 浏览器必须知道要使用哪个字符集。</p><dl>  <dt>ASCII</dt>    <dd>第一个字符编码标准</dd>    <dd>定义了 128 种可以在互联网上使用的字符</dd>  <dt>ISO-8859-1</dt>    <dd>HTML 4 的默认字符集</dd>    <dd>支持 256 个不同的字符代码/dd>  <dt>UTF-8</dt>    <dd>H5默认字符集</dd>    <dd>涵盖了世界上几乎所有的字符和符号</dd></dl>
              </div>
            </details>
<details class="folding-tag" blue><summary> HTML url与url编码 </summary>
              <div class='content'>
              <p>URL（Uniform Resource Locator）统一资源定位器用于定位万维网上的文档或其他数据，语法：</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line">scheme://host.domain:port/path/filename</span><br><span class="line"></span><br><span class="line">scheme  定义因特网服务的类型或协议，如http、https、ftp、file等</span><br><span class="line">host    定义域主机（http 的默认主机是 www）</span><br><span class="line">domain  定义因特网域名</span><br><span class="line">port   定义主机上的端口号（http 的默认端口号是 80）</span><br><span class="line">path    定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</span><br><span class="line">filename 定义文档/资源的名称</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>URL 只能使用 ASCII 字符集来通过因特网进行发送。<br>由于 URL 常常会包含 ASCII 集合之外的字符，所以URL 必须转换为有效的 ASCII 格式。<br>URL 编码使用%加上两位的十六进制数来替换非 ASCII 字符，如<code>空格</code>会被编码成%20,<code>#</code>会被编码成%23</p>
              </div>
            </details>
<h2>其他</h2>
<ul>
<li><a class="link"   href="https://www.w3school.com.cn/html/html_forms.asp" >form表单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li><a class="link"   href="https://www.w3school.com.cn/html/html5_canvas.asp" >canvas画布 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>html框架</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署时出错Error: Spawn failed</title>
    <url>/posts/f6fd029b.html</url>
    <content><![CDATA[<p>在部署Hexo时，出现了以下错误：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107220445.png"
                      alt="20230107220445"
                ></p>
<p>解决办法：</p>
<span id="more"></span>
<ol>
<li>
<p>删除站点根目录下的<code>.deploy_git</code>文件夹（稍后会自动生成）</p>
</li>
<li>
<p>执行以下命令</p>
</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>Hexo三连重新部署</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cl;hexo g;hexo d</span><br></pre></td></tr></table></figure></div>
<p>部署成功！</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107221408.png"
                      alt="20230107221408"
                ></p>
<p>如果你还是有问题，可以查看<a class="link"   href="https://www.cnblogs.com/chijintao/p/14993423.html" >Hexo部署出现错误err: Error: Spawn failed解决方式  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>利用PS扣除图片透明背景</title>
    <url>/posts/403dbdb1.html</url>
    <content><![CDATA[<p>开发中常常要用到带透明背景的图像，但是很多在线抠图工具要注册，登录，修图，到最后要保存时，才会提示你需要开通会员，真的让人很生气。那么如何使用PS工具扣除一张图片的透明背景呢？实际上只需要简单几步就可以了。</p>
<p><strong>第一步，打开一张图片，在左侧菜单栏中选择魔棒工具</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107212307.png"
                      alt="20230107212307"
                ></p>
<p><strong>第二步，返回绘图区域，单击鼠标选择图片上的背景空白区域</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107210313.png"
                      alt="20230107210313"
                ></p>
<p><strong>第三步，右击鼠标，点击选择反向，以选择图片上的人物</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107210554.png"
                      alt="20230107210554"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107210659.png"
                      alt="20230107210659"
                ></p>
<p><strong>第四步，再次右击，选择通过拷贝的图层</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107210853.png"
                      alt="20230107210853"
                ></p>
<p>这时在窗口右下方的操作区域，你会看到多了一个图层，这个图层就是去除背景后的图像</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107211347.png"
                      alt="20230107211347"
                ></p>
<p><strong>第五步，在新图层上右击，选择快速导出为PNG格式的图片就可以了</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230107211608.png"
                      alt="20230107211608"
                ></p>
]]></content>
  </entry>
  <entry>
    <title>Github使用指南</title>
    <url>/posts/a231cf40.html</url>
    <content><![CDATA[<h2>寻找开源项目</h2>
<p><strong>在Github上搜索开源项目</strong></p>
<p>第一步，在Github主页左上角找到搜索框</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109141254.png"
                      alt="20230109141254"
                ></p>
<p>第二步，利用关键词搜索或筛选出想要的项目</p>
<table>
<thead>
<tr>
<th>关键词</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>in:name</td>
<td>按项目名称筛选</td>
</tr>
<tr>
<td>stars:</td>
<td>按项目点赞数筛选</td>
</tr>
<tr>
<td>pushed:</td>
<td>按项目更新时间筛选</td>
</tr>
<tr>
<td>forks:</td>
<td>按项目拷贝人数筛选</td>
</tr>
</tbody>
</table>
<p>比如，我们要在Github上搜索名称包含<code>springboot</code>的项目</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109142112.png"
                      alt="20230109142112"
                ></p>
<p>如果我们要进一步从这215110个项目中筛选，使用<code>空格</code>隔开并追加筛选关键词即可：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109142336.png"
                      alt="20230109142336"
                ></p>
<p>满足<code>项目名称包含springboot+点赞数超过1000+最后更新时间在2020-09-20之后+项目拷贝数大于1000</code>条件的共有9个项目</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109142529.png"
                      alt="20230109142529"
                ></p>
<h2>下载开源项目</h2>
<p><strong>需要了解的几个关键字</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109135308.png"
                      alt="20230109135308"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109135446.png"
                      alt="20230109135446"
                ></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Watch</td>
<td>有多少人在关注这个项目，项目一旦有变换关注者会收到系统通知</td>
</tr>
<tr>
<td>Fork</td>
<td>有多少人拷贝了这个项目，进行参与优化和完善，并提交给原作者</td>
</tr>
<tr>
<td>Star</td>
<td>有多少人给这个项目点赞，一般点赞数越高，该项目热度越高</td>
</tr>
</tbody>
</table>
<br/>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109140521.png"
                      alt="20230109140521"
                ></p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code</td>
<td>项目源代码</td>
</tr>
<tr>
<td>Issues</td>
<td>提交Bug，与作者交流，读做&quot;一寿司&quot;。每个Issue可以有两种状态: Open和Closed</td>
</tr>
<tr>
<td>Pull Requests</td>
<td>Fork拷贝源代码并修改后，发起一个Pull Requests可以让原作者访问你的仓库，看到你的修改</td>
</tr>
<tr>
<td>Wiki</td>
<td>项目介绍或者一些相关文档的链接</td>
</tr>
</tbody>
</table>
<p><strong>本地下载源代码的三种方式</strong></p>
<ol>
<li>通过开发工具或命令行进行git克隆（建议）</li>
<li>使用Github桌面应用打开并下载</li>
<li>直接下载源代码的压缩文件到本地</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109140105.png"
                      alt="20230109140105"
                ></p>
<p>你的项目很不错，但现在它是我的啦🤪（作者：我xxx）</p>
<h2>运行和使用</h2>
<p>下载好心仪的项目源代码后，该如何阅读源码？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/20230109142852.png"
                      alt="20230109142852"
                ></p>
<h2>Git</h2>
<p>Git的核心功能是把你的代码的变化以你的提交（commit）为单位记录下来，方便后期回滚</p>
<p>Github是基于Git这个版本控制软件来<br>
托管项目的网站</p>
<h2>参考</h2>
<p><a class="link"   href="https://www.bilibili.com/video/BV1e541137Tc/?spm_id_from=333.788.recommend_more_video.1&amp;vd_source=2d23482c8b2173041eefa533c7aaecd9" >Github 新手够用指南 | 全程演示&amp;个人找项目技巧放送 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><strong>一些后话</strong></p>
<p>本人纯纯英语学渣，从小到大英语就没好过，但是身为一个程序员，怎么能不用Github呢？个人觉得要想用好Github，除了需要懂得Git的基本操作外，还要能看懂什么意思，不然怎么流畅地操纵Github。<br>
于是乎，就有了这篇文章，记录下在Github上遇到的英文单词，短语和句子。英语渣真的太难了！😐</p>
<div class="nr">
  翻译可能不准确，仅供参考...
</div>
<br/>
<ol>
<li>第一组 个人信息类<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.staticaly.com/gh/sunday521/postimg.wyun521.top@main/img/2023/202301061535272.png"
                      alt="github"
                ></li>
</ol>
<table>
<thead>
<tr>
<th>English</th>
<th>中文</th>
</tr>
</thead>
<tbody>
<tr>
<td>Your profile</td>
<td><psw>你的配置文件</psw></td>
</tr>
<tr>
<td>Your repositories</td>
<td><psw>你的仓库</psw></td>
</tr>
<tr>
<td>Your projects</td>
<td><psw>你的项目</psw></td>
</tr>
<tr>
<td>Your stars</td>
<td><psw>你的Stars</psw></td>
</tr>
<tr>
<td>Your gists</td>
<td><psw>你的依据</psw></td>
</tr>
<tr>
<td>Your sponsors</td>
<td><psw>你的赞助商</psw></td>
</tr>
<tr>
<td>Upgrade</td>
<td><psw>升级</psw></td>
</tr>
<tr>
<td>Try Enterprise</td>
<td><psw>尝试企业</psw></td>
</tr>
<tr>
<td>Feature preview</td>
<td><psw>预览功能</psw></td>
</tr>
<tr>
<td>Help</td>
<td><psw>帮助</psw></td>
</tr>
<tr>
<td>Settings</td>
<td><psw>设置</psw></td>
</tr>
<tr>
<td>Sign out</td>
<td><psw>登出、注销</psw></td>
</tr>
<tr>
<td>user profile</td>
<td><psw>用户资料</psw></td>
</tr>
<tr>
<td>privacy statement</td>
<td><psw>隐私声明</psw></td>
</tr>
<tr>
<td>preferences</td>
<td><psw>偏好</psw></td>
</tr>
<tr>
<td>organization</td>
<td><psw>组织、机构</psw></td>
</tr>
<tr>
<td>profile</td>
<td><psw>用户资料</psw></td>
</tr>
</tbody>
</table>
]]></content>
  </entry>
  <entry>
    <title>mysql教程</title>
    <url>/posts/b6f3d8b3.html</url>
    <content><![CDATA[<h2>数据存取方式的对比</h2>
<p>传统的数据存储方式有</p>
<ol>
<li>Java集合：程序一旦停止运行，内存中的数据全部清空，无法做到持久化存储</li>
<li>XML文件：存取非常麻烦</li>
<li>传统文件系统：数据之间没有结构化的关联关系，难以应对业务开发中经常使用的增删改查操作</li>
</ol>
<p>那么，如何同时实现数据的<kbd>持久化+结构化+方便存取</kbd>呢？<br>
使用<kbd>数据库</kbd>就可以解决这个问题，数据库中的数据都是按照特定的格式进行存储的，可以方便地对数据进行增删改查操作。</p>
<h2>mysql概述</h2>
<details class="folding-tag" blue><summary> mysql是一个开源免费可跨平台的数据库管理系统（DBMS） </summary>
              <div class='content'>
              <p><mark>数据库相关概念</mark></p><ol><li>数据库|DB<br>存储数据的仓库，本质上是一个文件系统，保存了一系列有组织的数据</li><li>数据库管理系统|DBMS<br>操纵和管理数据库的大型软件，如mysql</li><li>结构化查询语言|SQL<br>专门用来操作数据库的语言</li></ol><p><mark>常见的DBMS</mark></p><ol><li>oracle   收费，商业级数据库，收购界大佬</li><li>mysql    开源的，使用最多的关系型数据库管理系统</li><li>sqlserver    微软开发的</li><li>sqlite   嵌入式的小型数据库管理系统，应用于手机端</li></ol><p>tips：mysql5.7和mysql8.0是mysql最受欢迎的两个版本</p><p><mark>RDBMS与非RDBMS</mark><br>关系型数据库（RDBMS）把复杂的数据结构归结为简单的二元关系。<br>非关系型数据库通常基于键值对存储数据，不需要经过SQL层的解析，进一步提高性能。</p><p>非关系型数据库分类：</p><ul><li>键值型数据库：通过key-value的方式存储数据，常用作内存缓存，<code>redis</code>是最受欢迎的键值型数据库</li><li>文档型数据库：把文档作为处理信息的基本单位，一个文档就相当于一条记录，<code>mongoDB</code>是最流行的文档型数据库</li><li>搜索引擎数据库：核心原理是倒排索引，典型代表有<code>elasticsearch、solr</code>等</li><li>列式数据库：与oracle、mysql、sqlserver等行式存储数据库相对，列式数据库将数据按列存储到数据库中，大大降低I/O时间，适合分布式文件系统，典型代表<code>HBase</code></li><li>图形数据库：利用图这种数据结构存储实体对象之间的关系，典型代表neo4j、infogrid等</li></ul><p>tips：NoSQL对SQL做出了很好的补充。在实际开发中，有很多业务需求其实并不需要完整的关系型数据库功能，非关系型数据库的功能就足够使用了，比如日志收集、排行榜、定时器等。使用<code>性能更高、成本更低</code>的<code>非关系型数据库</code>会是更好的选择。<br>但是，掌握SQL又是必要的，是每个IT从业者的必备技能之一。</p>
              </div>
            </details>
<p>学习mysql，我们应该：</p>
<ol>
<li>掌握数据库的使用，能够根据业务需求对数据进行增删改查</li>
<li>掌握数据库的设计，能够根据项目需求进行数据库和表关系的设计</li>
</ol>
<p>mysql可视化管理工具推荐使用navicat或DataGrip，两者底层其实都有对SQL语句的封装，我们鼠标点击，就相当于执行一条SQL命令</p>
<h2>sql命令速查</h2>
<h3 id="数据定义语言DDL">数据定义语言DDL</h3>
<p>DDL是对数据库、数据表、的增删改查（create、drop、alter）</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>create database &lt;db&gt; default character set utf8 collate utf8_general_ci;</td>
<td>创建数据库</td>
</tr>
</tbody>
</table>
<p class='p red'>📢 collate指定数据库排序规则，也就是当我们对多个字符串类型的数据进行order by查询时，数据最终排序表现的方式。 utf8_general_ci是不区分大小写的</p>
<h3 id="数据操作语言DML">数据操作语言DML</h3>
<p>DML主要完成数据的增删改（insert、update、delete）</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>mysql -u &lt;user&gt; -p</td>
<td>值</td>
</tr>
</tbody>
</table>
<h3 id="数据查询语言DQL">数据查询语言DQL</h3>
<p>DQL是对数据进行查询（select）</p>
<h3 id="数据控制语言DCL">数据控制语言DCL</h3>
<p>DCL用来控制数据库组件的存取（事务commit、事务rollback）</p>
<h2>mysql存储引擎</h2>
<kbd>存储引擎</kbd>定义了存储数据、建立索引、更新数据、查询数据的具体实现规则，又称表的类型
<p>mysql支持的存储引擎有InnoDB（默认）、MyISAM等，可以使用<code>show engines;</code>命令查看所有存储引擎</p>
<p>InnoDB存储引擎的特点：支持事务、保存点、主外键、主键自增等</p>
<p class='p red'>📢存储引擎相对于数据库，就好比马达相对于汽车，一个没有马达的汽车是跑不起来的。</p>
<h2>索引</h2>
<kbd>索引</kbd>类似一个目录或者标签，mysql查询有索引的特定记录时，就不需要从头开始一个一个找，而是直接“定位”，这会大大提高查询效率！（通常主键自带索引）
<p>索引的分类：</p>
<ol>
<li>普通索引   可以添加在任意数据类型的字段上</li>
<li>唯一性索引</li>
<li>全文索引   只能创建在字符串类型的字段上，InnoDB不支持</li>
<li>单列索引   一个索引只对应一个字段</li>
<li>多列索引   一个索引可对应多个字段</li>
<li>空间索引   InnoDB不支持</li>
</ol>
<p>索引的缺点：</p>
<ol>
<li>创建和维护索引需要消耗时间</li>
<li>索引需要占用物理空间</li>
</ol>
<p>索引的设计原则：</p>
<ol>
<li>为经常出现在where语句中的字段添加索引，而不是select后面的（where是定位的）</li>
<li>索引的值尽量唯一</li>
<li>不要添加过多的索引，这会大大提高维护成本！</li>
</ol>
<p>索引的用法：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="keyword">add</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span></span><br><span class="line">(字段)</span><br><span class="line"><span class="keyword">create</span> <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span>(字段)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="keyword">drop</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> index <span class="operator">&lt;</span>index_name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></div>
<h2>mysql视图</h2>
<kbd>视图</kbd>是数据库中虚拟的表，并不真实存在，它能够针对不同用户或业务需求以不同的方式查询同一张表中的数据（我们通常只需要查询出原始表中特定的几个字段来满足业务需求，而不需要把所有字段全部查出）<emp>而视图本质上就是一条查询语句执行的结果</emp>
<p>视图的用法：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> <span class="operator">&lt;</span>view_name<span class="operator">&gt;</span> <span class="keyword">as</span> <span class="operator">&lt;</span>特定的<span class="keyword">select</span>语句，查询结果保存在视图中<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用视图</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>view_name<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> <span class="operator">&lt;</span>view_name<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>视图和原始表之间的数据是同步的，只不过少了几个字段而已。在视图中添加数据，原始表也会改变</p>
<h2>mysql触发器</h2>
<kbd>触发器（Trigger）</kbd>中定义了一系列操作，当对指定表进行增删改查时，会自动触发执行这些操作以更新目标表。
<p>触发器用法：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建触发器 当在指定表中插入数据时，在目标表也新增一条name字段记录</span></span><br><span class="line"><span class="comment">-- begin后end前填写触发的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> <span class="operator">&lt;</span>trigger_name<span class="operator">&gt;</span> </span><br><span class="line">  after <span class="keyword">insert</span> <span class="keyword">on</span> <span class="operator">&lt;</span>指定表<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span>         </span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>目标表<span class="operator">&gt;</span>(name) <span class="keyword">values</span>(new.name)</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> <span class="operator">&lt;</span>trigger_name<span class="operator">&gt;</span> </span><br><span class="line">  after <span class="keyword">delete</span> <span class="keyword">on</span> <span class="operator">&lt;</span>指定表<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">  <span class="keyword">begin</span>         </span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">into</span> <span class="operator">&lt;</span>目标表<span class="operator">&gt;</span>(name) <span class="keyword">values</span>(old.name)</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 🤔我们好像可以利用触发器来备份用户刚删除的文件</span></span><br><span class="line"><span class="comment">-- 删除触发器</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> <span class="operator">&lt;</span>trigger_name<span class="operator">&gt;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2>mysql存储过程</h2>
<kbd>存储过程</kbd>是一组定义好的、为了完成特定功能的SQL语句的集合，存储在数据库中，供开发人员调用（类似Java中的方法）
<p>存储过程的优点：</p>
<ol>
<li>一次定义，多次调用</li>
<li>与使用原始sql语句相比，执行速度更快，更安全</li>
</ol>
<p>存储过程用法：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 入参</span></span><br><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="operator">&lt;</span>proc_name<span class="operator">&gt;</span>(<span class="operator">&lt;</span>入参或出参<span class="operator">&gt;</span> <span class="operator">&lt;</span>参数名称<span class="operator">&gt;</span> <span class="operator">&lt;</span>参数类型<span class="operator">&gt;</span>)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="operator">&lt;</span>变量名称<span class="operator">&gt;</span> <span class="operator">&lt;</span>变量类型<span class="operator">&gt;</span>;</span><br><span class="line">    if <span class="operator">&lt;</span>参数名称<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>?<span class="operator">&gt;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="operator">&lt;</span>变量名称<span class="operator">&gt;</span> <span class="operator">=</span> <span class="string">&#x27;mysql&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">set</span> <span class="operator">&lt;</span>变量名称<span class="operator">&gt;</span> <span class="operator">=</span> <span class="string">&#x27;java&#x27;</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>目标表<span class="operator">&gt;</span>(字段) <span class="keyword">values</span>(变量名称);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> <span class="operator">&lt;</span>proc_name<span class="operator">&gt;</span>(参数);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> <span class="operator">&lt;</span>proc_name<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 出参/返回值</span></span><br><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">call</span> <span class="operator">&lt;</span>proc_name<span class="operator">&gt;</span>(<span class="variable">@count</span>_num);</span><br><span class="line"><span class="comment">-- 查看调用结果</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@count</span>_num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除存储过程</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> <span class="operator">&lt;</span>proc_name<span class="operator">&gt;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2>mysql数据类型</h2>
<h3 id="整数类型">整数类型</h3>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>tinyint</td>
<td>1byte</td>
<td>非常小的整数</td>
</tr>
<tr>
<td>smallint</td>
<td>2byte</td>
<td>小整数</td>
</tr>
<tr>
<td>mediumint</td>
<td>3byte</td>
<td>中等大小的整数</td>
</tr>
<tr>
<td>int</td>
<td>4byte</td>
<td>整数</td>
</tr>
<tr>
<td>bigint</td>
<td>8byte</td>
<td>大整数</td>
</tr>
</tbody>
</table>
<p class='p red'>📢 int是最常用的整数类型，适合存储生活中常见的整数。太小存不下，太大又会浪费掉占用的空间</p>
<h3 id="小数类型">小数类型</h3>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>float(M,D)</td>
<td>4byte</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>double(M,D)</td>
<td>8byte</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>decimal(M,D)</td>
<td>3byte</td>
<td>定点型小数，将整数部分和小数部分分开存储</td>
</tr>
</tbody>
</table>
<ol>
<li>M: 总位数，该字段最多需要的十进制有效数字个数</li>
<li>D：保留几位小数，小数点后最多保留的十进制数字个数，多余的位自动四舍五入</li>
</ol>
<p class='p red'>📢 计算机在进行小数运算时，不可避免地会损失一些精度，所以"金额"尽量不要用浮点数类型，可以使用decimal定点型保证不丢失精度。 除此之外，浮点数和定点数用法基本一致</p>
<h3 id="字符串类型">字符串类型</h3>
<p>常用字符串类型：char(M)，varchar(M)</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>char(M)</td>
<td>M个字符</td>
<td>固定长度的字符串</td>
</tr>
<tr>
<td>varchar(M)</td>
<td>M个字符</td>
<td>可变长度的字符串</td>
</tr>
<tr>
<td>tinytext</td>
<td>2^8-1byte</td>
<td>非常小的字符串</td>
</tr>
<tr>
<td>text</td>
<td>2^16-1byte</td>
<td>小型字符串</td>
</tr>
<tr>
<td>mediumtext</td>
<td>2^24-1byte</td>
<td>中等长度的字符串</td>
</tr>
<tr>
<td>longtext</td>
<td>2^32-1byte</td>
<td>大的字符串</td>
</tr>
</tbody>
</table>
<h3 id="日期和时间类型">日期和时间类型</h3>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>year</td>
<td>1byte</td>
<td>年份值</td>
</tr>
<tr>
<td>time</td>
<td>3byte</td>
<td>时间值</td>
</tr>
<tr>
<td>date</td>
<td>3byte</td>
<td>日期值</td>
</tr>
<tr>
<td>datetime</td>
<td>8byte</td>
<td>日期+时间值</td>
</tr>
<tr>
<td>timestamp</td>
<td>4byte</td>
<td>时间戳，从1970-01-01 00:00:00到今天的毫秒值</td>
</tr>
</tbody>
</table>
<h3 id="二进制类型">二进制类型</h3>
<p>二进制类型用来保存图片、视频等数据，常用的有tinyblob，blob，mediumblob，longblob</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bit(M)</td>
<td>M位二进制01</td>
<td>小的二进制数据</td>
</tr>
<tr>
<td>binary</td>
<td>M byte</td>
<td>普通的二进制数据</td>
</tr>
<tr>
<td>varbinary</td>
<td>M byte</td>
<td>普通的二进制数据，可变长</td>
</tr>
<tr>
<td>tinyblob</td>
<td>255byte</td>
<td>大的二进制数据</td>
</tr>
<tr>
<td>blob</td>
<td>2^16-1byte</td>
<td>更大的二进制数据</td>
</tr>
<tr>
<td>mediumblob</td>
<td>2^24-1byte</td>
<td>最大单位MB</td>
</tr>
<tr>
<td>longblob</td>
<td>2^32-1byte</td>
<td>最大单位GB</td>
</tr>
</tbody>
</table>
<h2>基本sql语句</h2>
<h3 id="操作数据库">操作数据库</h3>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用数据库</span></span><br><span class="line">use <span class="operator">&lt;</span>dbname<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库,同时指定字符集和排序规则</span></span><br><span class="line"><span class="keyword">create</span> database <span class="operator">&lt;</span>dbname<span class="operator">&gt;</span> <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database <span class="operator">&lt;</span>dbname<span class="operator">&gt;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="操作数据表">操作数据表</h3>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在操作表之前，需要指定去使用一个数据库</span></span><br><span class="line"><span class="comment">-- 字段参数：主键（非空唯一），自增 ，默认值 </span></span><br><span class="line"><span class="comment">-- 查看数据库中的表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看指定表的结构</span></span><br><span class="line"><span class="keyword">desc</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> (</span><br><span class="line">     id    <span class="type">int</span>,</span><br><span class="line">     name  <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     price <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表结构，字段约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="keyword">alter</span><span class="operator">|</span><span class="keyword">add</span><span class="operator">|</span><span class="keyword">drop</span><span class="operator">&gt;</span> <span class="keyword">column</span> <span class="operator">&lt;</span>cname<span class="operator">&gt;</span> <span class="operator">&lt;</span>对字段的修改<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重命名字段或更改数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> change <span class="keyword">column</span> <span class="operator">&lt;</span>old_cname<span class="operator">&gt;</span> <span class="operator">&lt;</span>new_cname<span class="operator">&gt;</span> <span class="operator">&lt;</span>datatype<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="操作数据">操作数据</h3>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="comment">-- 省略字段列表相当于添加全部字段</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span>(字段列表) <span class="keyword">values</span> (值列表),(值列表)...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">delete</span> 字段列表 <span class="keyword">from</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据，字符串值要加&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="keyword">set</span> 字段<span class="operator">=</span>值,字段<span class="operator">=</span>值... <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span> <span class="keyword">where</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空表（谨慎使用）</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span>tname<span class="operator">&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2>mysql函数</h2>
<h3 id="数学函数">数学函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>abs()</td>
<td>求绝对值</td>
</tr>
<tr>
<td>floor()</td>
<td>向下取整</td>
</tr>
<tr>
<td>ceil()</td>
<td>向上取整</td>
</tr>
</tbody>
</table>
<p>数学函数举例：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="字符串函数">字符串函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>insert(s1,index,len,s2)</td>
<td>向字符串中插入新的字符串,下标从1开始</td>
</tr>
<tr>
<td>left(s,len)</td>
<td>截取字符串的前几个字符</td>
</tr>
<tr>
<td>right(s,len)</td>
<td>截取字符串的后几个字符</td>
</tr>
<tr>
<td>substring(s,index,len)</td>
<td>截取字符串</td>
</tr>
<tr>
<td>reverse()</td>
<td>反转字符串</td>
</tr>
<tr>
<td>upper()</td>
<td>将字符串转为大写</td>
</tr>
<tr>
<td>lower()</td>
<td>将字符串转为小写</td>
</tr>
</tbody>
</table>
<p>字符串函数举例：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(name,<span class="number">1</span>) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">right</span>(name,<span class="number">2</span>) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(name,<span class="number">1</span>,<span class="number">3</span>) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> reverse(name) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(name) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(name) <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="日期函数">日期函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>curdate()</td>
<td>获取当前日期</td>
</tr>
<tr>
<td>curtime()</td>
<td>获取当前时间</td>
</tr>
<tr>
<td>now()</td>
<td>获取当前日期+时间</td>
</tr>
<tr>
<td>datediff(d1,d2)</td>
<td>计算两个日期的差值</td>
</tr>
<tr>
<td>adddate(d,n)</td>
<td>计算累加n天后的日期</td>
</tr>
<tr>
<td>subdate(d,n)</td>
<td>计算指定日期n天前的日期</td>
</tr>
</tbody>
</table>
<p>日期函数举例：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> curdate();</span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2022-12-26&#x27;</span>,<span class="string">&#x27;2022-12-01&#x27;</span>);  <span class="comment">-- 25</span></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2022-12-01&#x27;</span>,<span class="string">&#x27;2022-12-26&#x27;</span>);  <span class="comment">-- -25</span></span><br><span class="line"><span class="keyword">select</span> adddate(<span class="string">&#x27;2022-12-01&#x27;</span>,<span class="number">25</span>);  <span class="comment">-- 2022-12-26</span></span><br><span class="line"><span class="keyword">select</span> adddate(<span class="string">&#x27;2022-12-01&#x27;</span>,<span class="number">-25</span>);  <span class="comment">-- 2022-11-06</span></span><br><span class="line"><span class="keyword">select</span> subdate(<span class="string">&#x27;2022-11-29&#x27;</span>,<span class="number">31</span>);  <span class="comment">-- 2022-10-29</span></span><br></pre></td></tr></table></figure></div>
<h3 id="聚合函数">聚合函数</h3>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>count()</td>
<td>统计总记录数</td>
</tr>
<tr>
<td>sum()</td>
<td>计算某个字段所有值的和</td>
</tr>
<tr>
<td>avg()</td>
<td>求平均值</td>
</tr>
<tr>
<td>max()</td>
<td>求最大值</td>
</tr>
<tr>
<td>min()</td>
<td>求最小值</td>
</tr>
</tbody>
</table>
<p>聚合函数举例：</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> student;  <span class="comment">--统计总人数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;lisi&#x27;</span>;  <span class="comment">--计算总成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;lisi&#x27;</span>;  <span class="comment">--计算平均成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;lisi&#x27;</span>;  <span class="comment">--计算最高成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(score) <span class="keyword">from</span> course <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;lisi&#x27;</span>;  <span class="comment">--计算最低成绩</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2>条件查询</h2>
<p>分组查询，排序查询</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">avg</span>(score) <span class="keyword">from</span> course <span class="keyword">group</span> <span class="keyword">by</span> name;  <span class="comment">-- 按学生姓名分组，以统计每个学生的平均成绩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">asc</span>;  <span class="comment">--按成绩从高到低排序</span></span><br></pre></td></tr></table></figure></div>
<h2>mysql运算符</h2>
<p>与Java类似：</p>
<ol>
<li>算术运算符（+、-、*、/）</li>
<li>比较运算符（&gt;、&lt;、=、&gt;=、&lt;=）</li>
<li>逻辑运算符（&amp;&amp; || ）</li>
</ol>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,score<span class="number">-60</span> <span class="keyword">from</span> course;   <span class="comment">-- lisi 39</span></span><br><span class="line"><span class="keyword">select</span> name,score <span class="keyword">from</span> course <span class="keyword">where</span> score<span class="operator">&gt;</span><span class="number">98</span>;</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>mysql中的函数和运算符可以用于select子句或where子句，在select语句中使用，将直接输出函数或运算符的结果；在where语句中使用，将根据函数或运算符结果去增删改查满足条件的数据</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>linux必备知识总结</title>
    <url>/posts/9e4bba06.html</url>
    <content><![CDATA[<h1>linux基础命令</h1>
<h2>ls命令</h2>
<p><code>ls命令</code>的作用是列出目录下的内容</p>
<details class="folding-tag" blue><summary> ls命令用法 </summary>
              <div class='content'>
              <p>-a 列出全部文件，包含隐藏的文件<br>-l 显示每个文件的详细信息<br>-h 以人性化的方式显示文件的大小，带上大小单位。需配合-l选项使用</p>
              </div>
            </details>
<p>ls命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a /     <span class="comment">#列出根目录下所有文件</span></span><br><span class="line"><span class="built_in">ls</span> -lh /    </span><br></pre></td></tr></table></figure></div>
<h2>cd命令</h2>
<p><code>cd命令</code>用于切换工作目录（change directory）</p>
<p>cd命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>      <span class="comment">#切换到用户家目录下</span></span><br><span class="line"><span class="built_in">cd</span> /    <span class="comment">#切换到根目录</span></span><br></pre></td></tr></table></figure></div>
<h2>pwd命令</h2>
<p><code>pwd命令</code>可以查看当前工作目录的具体路径（print work directory）</p>
<p>pwd命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></div>
<h2>mkdir命令</h2>
<p><code>mkdir命令</code>可以创建新的文件夹（make directory）</p>
<details class="folding-tag" blue><summary> mkdir命令用法 </summary>
              <div class='content'>
              <p>-p 级联创建，自动创建不存在的父目录</p>
              </div>
            </details>
<p>mkdir命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/sunday/test</span><br><span class="line"><span class="built_in">ls</span> /home/sunday/</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /home/sunday/a/b/c</span><br><span class="line"><span class="built_in">ls</span> /home/sunday/</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>创建文件夹需要修改权限，普通用户只能在其HOME目录内创建新的文件夹！</p>
</blockquote>
<h2>touch命令</h2>
<p><code>touch命令</code>用来创建一个新的文件</p>
<p>touch命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt  <span class="comment">#在当前目录下新建一个文件test.txt</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>tips：在linux中，文件使用<code>-</code>标识，文件夹使用<code>d</code>标识，软链接使用<code>l</code>标识</p>
</blockquote>
<h2>cat命令</h2>
<p><code>cat命令</code>用来查看文件的全部内容</p>
<p>cat命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> test.txt</span><br></pre></td></tr></table></figure></div>
<h2>more命令</h2>
<p><code>more命令</code>用来分页查看文件的内容，在文件内容过多时可以一页一页地查看。</p>
<ul>
<li>空格键翻页</li>
<li>q键退出查看文件</li>
</ul>
<p>more命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">more /etc/services</span><br></pre></td></tr></table></figure></div>
<h2>cp命令</h2>
<p><code>cp命令</code>用来复制文件或文件夹（copy）</p>
<details class="folding-tag" blue><summary> cp命令用法 </summary>
              <div class='content'>
              <p>语法：cp 要复制的文件 复制到的文件</p><p>-r 复制文件夹时需带上这个参数</p>
              </div>
            </details>
<p>cp命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> test.txt ./test222.txt</span><br><span class="line"><span class="built_in">cp</span> -r <span class="built_in">test</span> test222          <span class="comment">#复制文件夹，需要带上-r参数</span></span><br></pre></td></tr></table></figure></div>
<h2>mv命令</h2>
<p><code>mv命令</code>用来移动文件或文件夹，也可以进行文件的重命名操作（move）</p>
<p>mv命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> test.txt /home/sunday    <span class="comment">#文件移动</span></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">test</span> /home/sunday        <span class="comment">#文件夹移动</span></span><br><span class="line"><span class="built_in">mv</span> test.txt test222.txt     <span class="comment">#文件重命名</span></span><br></pre></td></tr></table></figure></div>
<h2>rm命令</h2>
<p><code>rm命令</code>用于删除文件或文件夹</p>
<details class="folding-tag" blue><summary> rm命令用法 </summary>
              <div class='content'>
              <p>语法：rm [-r -f] 参数1 参数2…</p><p>-r 删除文件夹<br>-f force强制删除，不需要进行确认<br>参数n 要删除的文件列表，空格隔开</p>
              </div>
            </details>
<h2>which命令</h2>
<p>每个命令本质上都是一个个的可执行程序，在linux中，可以使用<code>which 命令</code>名称来查看命令本体可执行程序的位置。</p>
<p>which命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">cd</span>    <span class="comment">#/usr/bin/cd</span></span><br><span class="line"><span class="built_in">which</span> <span class="built_in">pwd</span>   <span class="comment">#/usr/bin/pwd</span></span><br><span class="line"><span class="built_in">which</span> java  <span class="comment">#/usr/local/software/jdk/bin/java</span></span><br></pre></td></tr></table></figure></div>
<h2>find命令</h2>
<p>find命令用来在某个路径下搜索指定的文件的位置，支持文件名搜索和文件大小搜索</p>
<p>find命令语法<br>
<code>find 搜索路径 -name &quot;要查找的文件名&quot;</code> 或<br>
<code>find 搜索路径 -size +|-n[kMG]</code></p>
<p>find命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name <span class="string">&quot;test&quot;</span></span><br><span class="line">find / -name <span class="string">&quot;*test*&quot;</span>   <span class="comment">#全盘搜索包含test的文件</span></span><br><span class="line"></span><br><span class="line">find / -size -10k   <span class="comment">#全盘搜索文件大小小于10KB的文件</span></span><br><span class="line">find / -size +100M   <span class="comment">#全盘搜索文件大小大于100MB的文件</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>全盘搜索需要root权限</p>
</blockquote>
<blockquote>
<p>find查找的文件支持通配符*</p>
</blockquote>
<h2>echo命令</h2>
<p><code>echo</code>命令可以在命令行内输出指定内容</p>
<p>echo命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Linux&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>`    <span class="comment">#echo `命令` 输出命令的执行结果而不是字符</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>若输出内容包含空格等特殊符号,最好使用&quot;&quot;包裹</p>
</blockquote>
<h2>重定向符 &gt;</h2>
<p>重定向符<code>&gt;</code>和<code>&gt;&gt;</code>可以将左侧命令的结果，<code>覆盖/追加</code>写入到右侧指定的文件中。例如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Linux&quot;</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cat</span> hello.txt</span><br><span class="line"><span class="comment">#Hello Linux</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Hexo&quot;</span> &gt;&gt; hello.txt</span><br><span class="line"><span class="built_in">cat</span> hello.txt</span><br><span class="line"><span class="comment">#Hello Linux</span></span><br><span class="line"><span class="comment">#Hello Hexo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Java&quot;</span> &gt; hello.txt</span><br><span class="line"><span class="built_in">cat</span> hello.txt</span><br><span class="line"><span class="comment">#Hello Java</span></span><br></pre></td></tr></table></figure></div>
<p>再如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> &gt; test.txt</span><br><span class="line"><span class="built_in">cat</span> test.txt</span><br><span class="line"><span class="comment">#hello.txt</span></span><br><span class="line"><span class="comment">#test.txt</span></span><br></pre></td></tr></table></figure></div>
<h2>tail命令</h2>
<p><code>tail</code>命令可以查看文件尾部的内容，也可以持续跟踪文件的最新更改。</p>
<p>tail命令语法<br>
<code>tail [-f -num] 查看或跟踪的文件名</code></p>
<p>tail命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> / &gt;&gt; test.txt</span><br><span class="line"><span class="built_in">tail</span> test.txt   <span class="comment">#默认查看尾部10行</span></span><br><span class="line"><span class="comment">#proc</span></span><br><span class="line"><span class="comment">#root</span></span><br><span class="line"><span class="comment">#run</span></span><br><span class="line"><span class="comment">#sbin</span></span><br><span class="line"><span class="comment">#srv</span></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line"><span class="comment">#tmp</span></span><br><span class="line"><span class="comment">#usr</span></span><br><span class="line"><span class="comment">#var</span></span><br><span class="line"><span class="comment">#www</span></span><br><span class="line"><span class="built_in">tail</span> -5 test.txt    <span class="comment">#查看尾部5行内容</span></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line"><span class="comment">#tmp</span></span><br><span class="line"><span class="comment">#usr</span></span><br><span class="line"><span class="comment">#var</span></span><br><span class="line"><span class="comment">#www</span></span><br><span class="line"><span class="built_in">tail</span> -f -5 test.txt</span><br><span class="line"><span class="built_in">echo</span> 123 &gt;&gt; test.txt</span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line"><span class="comment">#tmp</span></span><br><span class="line"><span class="comment">#usr</span></span><br><span class="line"><span class="comment">#var</span></span><br><span class="line"><span class="comment">#www</span></span><br><span class="line"><span class="comment">#123</span></span><br></pre></td></tr></table></figure></div>
<h2>命令补充</h2>
<h3 id="vim命令">vim命令</h3>
<p><code>vim</code>命令可以对文本进行编辑</p>
<p>vim的三种模式</p>
<ul>
<li>命令模式</li>
<li>插入模式 i ESC</li>
<li>底线模式 :wq</li>
</ul>
<h1>linux必备知识</h1>
<h2>linux目录结构</h2>
<h2>yum安装软件✅</h2>
<p><strong>yum是linux中一个rpm包管理器，可以自动化安装配置第三方软件，同时自动解决依赖问题。 注意：</strong></p>
<ul>
<li>yum安装软件需要联网</li>
<li>yum命令需要root权限</li>
<li>yum命令安装软件相当于从&quot;linux官方应用商店&quot;下载安装软件。与我们自行上传安装包解压安装是有区别的</li>
</ul>
<p>临时赋予普通用户root权限执行命令（需要先修改<code>/etc/sudoers</code>文件）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sudo 命令</span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> yum命令用法 </summary>
              <div class='content'>
              <p>-y 自动确认，无需手动确认安装或卸载<br>install 安装<br>remove  卸载<br>search  搜索</p>
              </div>
            </details>
<p>yum命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum search wget</span><br><span class="line">yum -y install wget</span><br><span class="line">yum -y remove wget</span><br></pre></td></tr></table></figure></div>
<details class="folding-tag" blue><summary> 不同系统常见的软件安装包后缀 </summary>
              <div class='content'>
              <ul><li>windows  .exe .msi</li><li>mac      .pkg</li><li>linux    .rpm</li></ul>
              </div>
            </details>
<blockquote>
<p>tips：CentOS系统安装包.rpm使用yum包管理器，而Ubuntu系统安装包.deb使用apt包管理器。apt包管理器与yum包管理器用法基本一致，不再列举</p>
</blockquote>
<h2>systemctl服务管理✅</h2>
<h3 id="系统内置的服务举例">系统内置的服务举例</h3>
<ul>
<li>NetworkManager  主网络服务</li>
<li>network         副网络服务</li>
<li>firewalld       防火墙服务</li>
<li>sshd            安全的远程登录服务</li>
</ul>
<h3 id="systemctl命令">systemctl命令</h3>
<p><strong>systemctl命令常用来控制一些软件（服务）的启动、停止、开机自启。</strong></p>
<details class="folding-tag" blue><summary> systemctl命令用法 </summary>
              <div class='content'>
              <p>start  启动服务<br>stop   关闭服务<br>status 查看服务状态（是否已启动|running dead）<br>enable 开机自启<br>disable 禁止开机自启</p>
              </div>
            </details>
<p>systemctl命令示例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld  <span class="comment">#查看防火墙运行状态</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl start firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure></div>
<p>再比如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y httpd        <span class="comment">#安装apache服务器软件</span></span><br><span class="line">systemctl status httpd      <span class="comment">#启动web服务</span></span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl <span class="built_in">enable</span> httpd    <span class="comment">#开机自启</span></span><br></pre></td></tr></table></figure></div>
<p>可以看出，systemctl命令不仅可以管理系统内置的服务，也能够管理第三方软件所提供的服务，当然，前提是软件注册服务交给systemctl管理，部分软件需要手动添加服务。</p>
<h2>ln软链接</h2>
<h3 id="概念">概念</h3>
<p>linux系统的 <strong>软链接</strong> 类似Windows系统中的快捷方式，他可以将文件链接到其他位置。注意：</p>
<ul>
<li>与文件、目录用-、d标识类似，使用<code>l</code> 标识一个软链接</li>
<li>软链接和快捷方式一样，只是一个逻辑指向，并不是物理的移动或复制</li>
</ul>
<h3 id="ln命令创建软链接">ln命令创建软链接</h3>
<details class="folding-tag" blue><summary> ln命令用法 </summary>
              <div class='content'>
              <p>语法：ln -s 被链接的文件 软链接位置</p><p>-s  创建软链接</p>
              </div>
            </details>
<p>ln命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /etc/yum.conf  ./yum.conf   <span class="comment">#在当前目录下创建一个名称为yum.conf的软链接，指向/etc/yum.conf</span></span><br><span class="line"><span class="built_in">ln</span> -s /etc/yum  ./yum <span class="comment">#文件夹的软链接</span></span><br></pre></td></tr></table></figure></div>
<h2>date日期和时区</h2>
<h3 id="date命令">date命令</h3>
<p><code>date命令</code>可以查看当前日期和时间</p>
<details class="folding-tag" blue><summary> date命令用法 </summary>
              <div class='content'>
              <p>语法：date [-d] [+格式化字符串]<br>-d  对日期进行加减操作<br>+格式化字符串参数列表</p><ul><li>%Y  年</li><li>%y  年份后两位数字</li><li>%m  月份（01-12）</li><li>%d  日（01-31）</li><li>%H  小时（00-23）</li><li>%M  分钟（00-59）</li><li>%S  秒（00-59）</li><li>%s  时间戳，自1970-01-01 00:00:00到现在的秒数</li></ul>
              </div>
            </details>
<p>date命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span>  <span class="comment">#直接使用date，将采用默认格式显示当前日期和时间</span></span><br><span class="line"><span class="built_in">date</span>  +%Y-%m-%d     <span class="comment">#格式化后的日期如2022-12-08</span></span><br><span class="line"><span class="built_in">date</span>  <span class="string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span>  <span class="comment">#格式化后的日期如2022-12-08 17:01:55</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>tips：不需要死记这些参数，知道它们取的是英文单词首字母就可以了~</p>
</blockquote>
<p>再比如</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span>  <span class="comment">#按默认格式显示后一天的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span> +%Y-%m-%d</span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 month&quot;</span>    <span class="comment">#显示后一个月的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 month&quot;</span>    <span class="comment">#显示前一个月的日期</span></span><br></pre></td></tr></table></figure></div>
<p>类似的时间标记有year、month、day、hour、minute、second</p>
<h3 id="linux系统时区的修改">linux系统时区的修改</h3>
<p>默认通过date查看的日期时间并不是很准确，我们可以修改时区UTC为上海CST，来使日期时间更准确:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /etc/localtime</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime</span><br></pre></td></tr></table></figure></div>
<h3 id="使用ntp进行时间同步和校准">使用ntp进行时间同步和校准</h3>
<p>ntp程序可以帮我们自动去校准系统时间，下载并启动ntp服务后会 <strong>定期</strong> 的帮我们联网校准系统时间</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install ntp</span><br><span class="line">systemctl start ntpd</span><br><span class="line">systemctl <span class="built_in">enable</span> ntpd <span class="comment">#开机启动</span></span><br></pre></td></tr></table></figure></div>
<p>当然，我们也可以手动校准（需要root权限）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ntpdate -u ntp.aliyun.com <span class="comment">#通过阿里云提供的服务网址配合ntpdate命令校准时间(安装ntp后会附带这个命令)</span></span><br></pre></td></tr></table></figure></div>
<h2>IP地址与主机名</h2>
<h3 id="ifconfig命令">ifconfig命令</h3>
<p><strong><code>ifconfig</code>命令可以查看本机的IP地址，一般CentOS系统的网卡名称默认为ens33</strong><br>
如果ifconfig命令无效，可以执行以下命令安装：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools</span><br></pre></td></tr></table></figure></div>
<h3 id="特殊的IP地址">特殊的IP地址</h3>
<ul>
<li>127.0.0.1  指代本机</li>
<li>0.0.0.0    可以指代本机，确定端口绑定关系，在放行规则中表示任意IP访问</li>
</ul>
<h3 id="主机名">主机名</h3>
<p><strong>每台电脑都有一个主机名（可以重复），可以使用<code>hostname</code>命令查看本台计算机的主机名</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hostname <span class="comment">#centos7</span></span><br></pre></td></tr></table></figure></div>
<p>hostname可以查看主机名，而<code>hostnamectl</code>可以修改主机名：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名</span><br><span class="line">hostname</span><br></pre></td></tr></table></figure></div>
<h2>域名解析✅</h2>
<p>所谓域名解析，就是将域名或主机名映射到对应的IP地址上，方便我们找到指定计算机.</p>
<p>当在浏览器中访问一个域名（主机名）时，会先在客户端本机中查找<code>hosts</code>文件，在其中查找映射关系，找不到的情况下，才会请求DNS域名解析服务器帮忙解析。这也是为什么修改本机hosts文件后可以得到与原来不一样的地址解析结果。</p>
<details class="folding-tag" blue><summary> 不同系统hosts文件路径 </summary>
              <div class='content'>
              <p>windows：C:\windows\system32\drivers\etc\hosts<br>linux：/etc/hosts</p>
              </div>
            </details>
<p>补充：如何在虚拟机中配置linux主机的固定IP地址？</p>
<ol>
<li>第一步，设置IP地址范围<br>
打开VMWare 》 编辑 》虚拟网络编辑器 》选择VMnet8，设置子网IP、子网掩码 》NAT设置 》设置网关IP。例如：</li>
</ol>
<ul>
<li>子网IP 192.168.88.0</li>
<li>子网掩码 255.255.255.0</li>
<li>网关IP  192.168.88.2</li>
</ul>
<ol start="2">
<li>第二步，修改网卡配置文件，设置IP地址和网关<br>
编辑<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>,在末尾添加：</li>
</ol>
<div class="highlight-container" data-rel="Properties"><figure class="iseeu highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">IPADDR</span>=<span class="string">&quot;192.168.88.130&quot;      #设置的IP要在子网IP范围内  </span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">&quot;255.255.255.0&quot;     </span></span><br><span class="line"><span class="attr">GATEWAY</span>=<span class="string">&quot;192.168.88.2&quot;      #网关和VMWare虚拟网络编辑器中设置的一致</span></span><br><span class="line"><span class="attr">DNS1</span>=<span class="string">&quot;192.168.88.2&quot;         #DNS服务器设置为网关即可</span></span><br></pre></td></tr></table></figure></div>
<p>同时，将BOOTPROTO的值dhcp修改为<code>static</code>，即静态IP</p>
<ol start="3">
<li>重启网卡</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>使用<code>ifconfig</code>命令查看IP地址,此时不管虚拟机是否关机重启，IP地址都不会改变</li>
</ol>
<blockquote>
<p>设置好linux虚拟主机的固定IP地址后，我们使用XShell远程连接软件连接linux虚拟机时就不需要老是更改IP地址了</p>
</blockquote>
<h2>网络请求和下载✅</h2>
<h3 id="ping命令">ping命令</h3>
<p><strong><code>ping命令</code>用于检查服务器或网络是否可以连通</strong></p>
<details class="folding-tag" blue><summary> ping命令用法 </summary>
              <div class='content'>
              <p>语法：ping [-c num] ip地址或主机名</p><p>-c 指定ping的次数</p>
              </div>
            </details>
<p>ping命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ping baidu.com            <span class="comment">#不指定次数，将一直ping，直到ctrl+C停止</span></span><br><span class="line">ping -c 3 baidu.com       <span class="comment">#ping 3次百度</span></span><br></pre></td></tr></table></figure></div>
<h3 id="wget命令">wget命令</h3>
<p><strong><code>wget</code>是非交互式的文件下载器，可以在命令行内下载网络上的文件</strong></p>
<details class="folding-tag" blue><summary> wget命令用法 </summary>
              <div class='content'>
              <p>语法：wget [-b] url</p><p>-b后台下载，将日志写入wget-log文件</p>
              </div>
            </details>
<p>wget命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://archive.apache.org/dist/.../hadoop-3.3.0.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>注意，无论下载是否完成，都会在当前目录下先生成一个即将要下载的文件，如hadoop-3.3.0.tar.gz</p>
<p>wget命令和yum命令的区别：</p>
<ul>
<li>wget用来下载网络上的文件，只要url有效就可以下载，但需要自行寻找下载地址；</li>
<li>yum是从“软件商店”上下载，只能下载yum管理器中存在的文件</li>
</ul>
<h3 id="curl命令">curl命令</h3>
<p><strong><code>curl</code>的作用与python中的requests模块相同，都是用来发起一个http请求，然后得到服务器的响应。服务器响应回来的可以是HTML源码，也可以是提供的要下载的文件</strong></p>
<details class="folding-tag" blue><summary> curl命令用法 </summary>
              <div class='content'>
              <p>语法：curl [-O] url</p><p>-O 指定保存下载的网络文件<br>url 指定要请求的网络地址</p>
              </div>
            </details>
<p>curl命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl cip.cc   <span class="comment">#cip.cc网站可以响应给我们的IP地址，运营商等信息</span></span><br><span class="line">curl -O http://archive.apache.org/dist/.../hadoop-3.3.0.tar.gz   <span class="comment">#下载网络文件，需要指定-O参数</span></span><br></pre></td></tr></table></figure></div>
<h2>端口相关✅</h2>
<h3 id="概念-v2">概念</h3>
<p>端口是设备与外界通讯交流的出入口，类似一个房子的门。端口可以分为两大类：</p>
<ul>
<li>物理端口：又称接口，是实际存在的，如USB接口，RJ45网口等</li>
<li><strong>虚拟端口：是计算机内部的端口，是不可见的，是操作系统和外部进行交互的大门</strong></li>
</ul>
<blockquote>
<p>tips：通过<strong>IP+端口</strong>可以锁定一个具体的程序或进程！</p>
</blockquote>
<h3 id="端口分类规范">端口分类规范</h3>
<ul>
<li>公认端口(1~1023): 专门给系统内置或者知名的一些程序使用，如SSH的22端口，HTTPS服务的443端口</li>
<li>注册端口(1024~49151): 用于松散地绑定一些程序或者服务，可以自定义，如MySQL的3306端口，Tomcat的8080端口</li>
<li>动态端口(49152~65535): 通常不会固定绑定一个程序，而是当程序对外进行网络链接时自动临时分配和使用</li>
</ul>
<h3 id="nmap命令">nmap命令</h3>
<p><code>nmap</code>可以查看端口占用情况</p>
<p>nmap命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> yum -y install nmap</span><br><span class="line"> nmap 127.0.0.1    <span class="comment">#查看本机端口占用</span></span><br><span class="line"></span><br><span class="line">port state service</span><br><span class="line">22/tcp open ssh</span><br><span class="line">25/tcp open smtp</span><br><span class="line">80/tcp open http</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></div>
<h3 id="netstat命令">netstat命令</h3>
<p>我们也可以使用<code>netstat</code>命令查看端口占用</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install net-tools</span><br><span class="line">netstat -anp | grep 关键字    <span class="comment">#查看包含指定关键字的端口状态以及被哪一个程序或进程占用</span></span><br></pre></td></tr></table></figure></div>
<h2>进程管理✅</h2>
<h3 id="概念-v3">概念</h3>
<p><strong>每一个程序在运行的时候，会被操作系统注册为系统的一个进程，方便操作系统管理。操作系统会为每一个进程分配一个独有的进程号，也称<code>PID</code>。</strong></p>
<h3 id="ps命令">ps命令</h3>
<p>在windows系统中，可以通过任务管理器查看正在运行中的进程。</p>
<p>在linux系统中，可以通过<code>ps</code>命令查看运行中的进程相关信息，包括</p>
<ul>
<li>UID  进程所属的用户</li>
<li>PID  进程号（唯一标识）</li>
<li>PPID 父进程号，启动此进程的其他进程</li>
<li>C    该进程的CPU占有率（%）</li>
<li>TIME 该进程累计占用CPU的时间，注意不是进程运行时间</li>
<li>CMD  进程对应的名称，启动路径或启动命令</li>
</ul>
<details class="folding-tag" blue><summary> ps命令用法 </summary>
              <div class='content'>
              <p>语法：ps [-e -f]</p><p>-e:显示所有的进程<br>-f：显示每个进程的全部完整信息</p>
              </div>
            </details>
<p>ps命令示例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef    <span class="comment">#查看在操作系统中运行的所有进程信息</span></span><br><span class="line">ps -ef | grep 关键字过滤</span><br></pre></td></tr></table></figure></div>
<h3 id="kill命令">kill命令</h3>
<p>在windows任务管理器内，选中一个进程，右击结束进程即可杀死一个进程<br>
在linux系统中，我们使用<code>kill</code>命令来杀死一个进程</p>
<details class="folding-tag" blue><summary> kill命令用法 </summary>
              <div class='content'>
              <p>语法：kill [-9] PID</p><p>-9 强制关闭</p>
              </div>
            </details>
<p>kill命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep <span class="built_in">tail</span></span><br><span class="line"><span class="built_in">kill</span> -9 98162 <span class="comment">#杀死一个进程，其中98162是查看到的tail进程的ID</span></span><br></pre></td></tr></table></figure></div>
<h2>主机状态监控</h2>
<h3 id="top命令">top命令</h3>
<p><strong>top命令用来打开一个linux任务管理器，可以查看CPU、内存的使用情况，进行系统资源监控</strong></p>
<ul>
<li>top默认5秒刷新一次页面信息</li>
<li>ctrl+C或Q键可以退出top界面</li>
</ul>
<p>top命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure></div>
<p>top命令扩展</p>
<ul>
<li>-p PID  只显示某一个进程资源占用情况</li>
<li>-d  设置刷新时间，默认5s</li>
<li>-c  显示产生进程的完整命令路径，默认只显示进程名</li>
<li>-n  指定刷新次数，top界面会在刷新n次后退出</li>
<li><strong>-i  不显示正在休眠的进程，只显示当前正在运行的进程</strong></li>
<li>-u 用户名 查看特定用户启动的进程</li>
</ul>
<p>在top界面中，也可以直接按键来调整显示：</p>
<ul>
<li>c 显示产生进程的完整命令</li>
<li>m 按进程占用内存大小排序</li>
<li>p 按进程占用CPU大小排序</li>
<li>e 切换进程内存显示单位，如k m g</li>
<li>i 不显示正在休眠的进程，只显示当前正在运行的进程</li>
</ul>
<h3 id="df命令">df命令</h3>
<p><code>df命令</code>可以查看磁盘空间占用</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">df</span> -h        </span><br><span class="line"><span class="comment"># -h以人性化的方式显示，带上单位M、G等</span></span><br></pre></td></tr></table></figure></div>
<h3 id="iostat命令">iostat命令</h3>
<p><code>iostat命令</code>用来查看每秒磁盘写入和读出的字符数</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> iostat [-x] num1 num2   </span><br><span class="line"><span class="comment">#-x显示更多信息  num1刷新间隔 num2刷新几次</span></span><br></pre></td></tr></table></figure></div>
<h3 id="sar-n-DEV">sar -n DEV</h3>
<p>sar -n DEV 可以查看网卡（如ens33）每秒发送和接收的数据包大小，监控网络情况</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> sar -n DEV num1 num2</span><br><span class="line"><span class="comment"># -n 查看网络</span></span><br><span class="line"><span class="comment"># DEV 查看网络接口</span></span><br><span class="line"><span class="comment"># num1 刷新间隔</span></span><br><span class="line"><span class="comment"># num2 刷新次数</span></span><br></pre></td></tr></table></figure></div>
<p>网络状态主要关注以下几个指标：</p>
<ul>
<li>rxKB/s  每秒接收的数据包大小，单位KB</li>
<li>txKB/s  每秒发送的数据包大小</li>
<li>IFACE   本地网卡接口的名称</li>
</ul>
<h2>环境变量✅</h2>
<h3 id="概念-v4">概念</h3>
<p><strong>环境变量是操作系统在运行的时候记录的一些关键性的信息，这些信息用来辅助系统运行。在linux系统中执行<code>env</code>命令可以查看当前系统中记录的所有环境变量</strong></p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">env</span> | grep PATH</span><br><span class="line"></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></div>
<p>linux中的一系列命令本质上其实都是一个个的可执行程序。比如，<code>cd</code>命令的本体其实就是<code>/usr/bin/cd</code>这个程序文件。</p>
<p><strong>通过在PATH环境变量中添加某个程序的可执行路径，就可以在任何目录下使用这个程序（命令）。</strong><br>
当执行某个命令时，操作系统会在PATH环境变量中查找是否存在该命令对应的可执行程序，若存在则执行，若不存在会提示找不到。</p>
<h3 id="符号的使用">$符号的使用</h3>
<p><strong>在linux系统中，我们可以使用<code>$</code>符号去取到环境变量中记录的值</strong></p>
<p>$符号使用举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">echo</span> <span class="variable">$PATH</span>    <span class="comment"># 输出PATH环境变量的值</span></span><br><span class="line"></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></div>
<h3 id="在linux中配置环境变量">在linux中配置环境变量</h3>
<p><strong>在linux系统中，用户可以自定义环境变量的键和值。</strong></p>
<details class="folding-tag" blue><summary> export命令临时设置环境变量 </summary>
              <div class='content'>
              <p>语法：export 变量名=变量值</p><p>export命令举例</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">export</span> MYNAME=123</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$MYNAME</span></span><br><span class="line">123</span><br><span class="line"> <span class="built_in">export</span> MYNAME=456</span><br><span class="line"> <span class="built_in">echo</span> <span class="variable">$MYNAME</span></span><br><span class="line">456</span><br></pre></td></tr></table></figure></div><p>tips：临时设置的环境变量值会在下次远程连接或者linux虚拟机重启时失效</p>
              </div>
            </details>
<details class="folding-tag" blue><summary> 永久设置环境变量 </summary>
              <div class='content'>
              <ul><li>在当前用户的<code>~/.bashrc</code>文件中配置的环境变量，仅针对当前用户有效</li><li>在系统的<code>/etc/profile</code>文件中配置的环境变量，对所有用户有效</li><li>配置后使用<code>source 文件名</code>来使配置立即生效</li></ul><p>举例：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile      <span class="comment"># 在末尾添加 export MYNAME=sunday 保存退出</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile   <span class="comment">#立即生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$MYNAME</span></span><br></pre></td></tr></table></figure></div>
              </div>
            </details>
<p>配置PATH环境变量时要注意，不要直接使用PATH=xxx来配置，这样会导致原来PATH中配置的变量值被覆盖丢失，正确的做法是：<br>
export PATH=$PATH:xxx</p>
<h2>linux上传和下载</h2>
<h3 id="使用FinalShell">使用FinalShell</h3>
<p>使用<code>FinalShell</code>软件可以方便地远程连接云服务器或linux虚拟机，同时也可以方便地进行文件的上传和下载操作。</p>
<h3 id="使用命令行">使用命令行</h3>
<p>如果不使用FinalShell的图形界面传输文件，还可以使用命令行方式：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br><span class="line">rz              <span class="comment">#上传文件，会弹出文件选择窗口</span></span><br><span class="line">sz 下载的文件名  <span class="comment">#默认会下载到windows桌面/fsdownload/目录中</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>r: receive接收</li>
<li>s: send发送</li>
</ul>
<h2>打包和压缩✅</h2>
<h3 id="概念-v5">概念</h3>
<p><strong>打包（归档）仅仅是将多个文件合并在一起，形成一个文件，归档文件大小是所有文件的和。而压缩的目的是为了减少文件的体积大小，减少占用空间，方便传输。</strong></p>
<p>在Linux系统中，常见的压缩文件后缀有.gz和.zip两种。</p>
<h3 id="tar命令">tar命令</h3>
<details class="folding-tag" blue><summary> tar命令用法 </summary>
              <div class='content'>
              <p>tar [-c -v -x -f  -z -C] 要打包或解打包的文件<br>-c  创建压缩文件<br>-v  显示压缩、解压缩的过程<br>-f  指定要压缩或解压缩的文件,必须在所有选项的最后<br>-x  解压文件<br>-z  gzip模式，默认普通的.tar格式<br>-C  解压到</p>
              </div>
            </details>
<p>tar命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打包或压缩</span></span><br><span class="line"> tar -cvf test.tar  1.txt 2.txt 3.txt</span><br><span class="line"> tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#解打包或解压缩</span></span><br><span class="line"> tar -xvf test.tar <span class="comment">#解压到当前目录中</span></span><br><span class="line"> tar -xvf test.tar -C /tmp/test    <span class="comment">#解压到指定目录</span></span><br><span class="line"> tar -zxvf test.tar.gz -C /tmp/test    <span class="comment">#解压到指定目录</span></span><br></pre></td></tr></table></figure></div>
<h3 id="zip命令">zip命令</h3>
<p>在linux系统中，也可以创建.zip格式的压缩包，这需要使用zip命令:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">zip test.zip 1.txt 2.txt 3.txt</span><br><span class="line">zip -r test.zip  <span class="built_in">test</span> 1.txt   <span class="comment">#当被压缩的文件包含文件夹时，需要带上-r参数</span></span><br></pre></td></tr></table></figure></div>
<p>与之相对，unzip命令用来解压.zip格式的压缩文件：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">unzip test.zip    <span class="comment">#解压到当前目录</span></span><br><span class="line">unzip test.zip -d /tmp/test   <span class="comment">#解压到指定目录下</span></span><br></pre></td></tr></table></figure></div>
<p>1.tar包就是所说的归档文件,gz和zip才是真正的压缩文件<br>
2.注意解压的文件会覆盖同名文件</p>
<h2>用户和权限✅</h2>
<h3 id="root用户">root用户</h3>
<p>root用户拥有系统最大的权限<br>
普通用户的拥有其HOME目录的所有权限，但在其他目录中通常只有读权限和执行权限，而没有写入权限</p>
<h3 id="su切换用户">su切换用户</h3>
<p>我们可以通过<code>su</code>命令来切换不同的用户。（使用root用户切换到其他用户不需要密码）</p>
<details class="folding-tag" blue><summary> su命令用法 </summary>
              <div class='content'>
              <p>语法：su [-] 用户名</p><p>-可选，在切换用户后加载环境变量，建议带上<br><code>exit</code> 或 <code>ctrl+D</code>：退回上一个用户</p>
              </div>
            </details>
<p>su命令语法</p>
<h3 id="sudo提权">sudo提权</h3>
<p><code>sudo</code>命令可以临时以root的身份执行一条命令，在执行完毕后，恢复普通用户权限。</p>
<p><strong>不是所有普通用户都可以使用sudo命令提权，只有经过root用户认证的普通用户才能够sudo提权。root认证方式：</strong><br>
<strong>以root身份执行<code>visudo</code>命令打开编辑<code>/etc/sudoers</code>文件，在文件末尾添加:</strong></p>
<div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">用户名 ALL=(ALL)    NOPASSWD: ALL</span><br></pre></td></tr></table></figure></div>
<p>sudo命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CenOS7 ~]<span class="comment"># visudo</span></span><br><span class="line">[root@CenOS7 ~]<span class="comment"># su - sunday</span></span><br><span class="line">Last login: Sat Dec 10 11:08:13 CST 2022 on pts/0</span><br><span class="line">[sunday@CenOS7 ~] sudo <span class="built_in">mkdir</span> /test</span><br><span class="line">[sunday@CenOS7 /] ll / | grep <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x    2 root root  4096 Dec 10 11:12 <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<h2>用户和用户组✅</h2>
<h3 id="概念-v6">概念</h3>
<p>在linux系统中，可以配置多个用户，也可以配置多个用户组。针对某一文件，既可以控制用户的权限，也可以控制用户组的权限。<br>
另外，一个用户可以加入多个用户组中。</p>
<h3 id="用户管理">用户管理</h3>
<p>以root身份执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">useradd [-g -d] 用户名</span><br><span class="line"><span class="comment">#添加一个用户</span></span><br><span class="line"><span class="comment"># -g 指定用户所属组，若不指定，会创建与用户同名的用户组并自动加入</span></span><br><span class="line"><span class="comment"># -d 指定用户HOME目录，默认/home/用户名</span></span><br><span class="line"></span><br><span class="line">userdel [-r] 用户名</span><br><span class="line"><span class="comment"># -r 删除用户的同时一并删除其HOME目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> 用户名</span><br><span class="line"><span class="comment">#查看用户所属组等相关信息</span></span><br><span class="line"></span><br><span class="line">usermod -aG 用户组名 用户名</span><br><span class="line"><span class="comment">#将用户加入指定用户组中，一个用户可以加入多个用户组</span></span><br></pre></td></tr></table></figure></div>
<h3 id="用户组管理">用户组管理</h3>
<p>以root身份执行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure></div>
<h3 id="getent命令">getent命令</h3>
<p><code>getent</code>命令可以查看当前系统中有哪些用户组或用户：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">getent passwd   <span class="comment">#查看所有用户</span></span><br><span class="line">getent group    <span class="comment">#查看所有用户组</span></span><br></pre></td></tr></table></figure></div>
<h2>权限管理✅</h2>
<h3 id="文件权限">文件权限</h3>
<details class="folding-tag" blue><summary> 文件的权限说明 </summary>
              <div class='content'>
              <p>drwxr-xr-x 2 root root  4096 Dec 10 11:46 linux</p><p>d文件夹，-文件，l软链接<br>rwx  文件所属用户权限|u<br>r-x  文件所属用户组权限|g<br>r-x  其他用户权限|o</p>
              </div>
            </details>
<p>权限表示</p>
<ul>
<li>r 读权限，如ls，cat</li>
<li>w 修改权限，如mkdir，rm，vim</li>
<li>x 执行权限，如cd，</li>
</ul>
<h3 id="chmod修改权限">chmod修改权限</h3>
<p><code>文件的拥有者或root用户</code>可以使用<code>chmod</code>命令去修改文件的权限。</p>
<details class="folding-tag" blue><summary> chmod命令用法 </summary>
              <div class='content'>
              <p>语法：chmod [-R] 权限 文件名</p><p>-R  对文件夹中的全部文件一并修改权限</p>
              </div>
            </details>
<p>chmod命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=x  1.txt <span class="comment">#或者 chmod 751 1.txt</span></span><br><span class="line"><span class="built_in">chmod</span> -R u=rwx,g=rx,o=x  <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<h3 id="chown修改所属用户">chown修改所属用户</h3>
<p>与chmod命令不同，只有<code>root用户</code>可以使用<code>chown</code>命令去修改文件所属的用户和用户组。<br>
普通用户不能够随意把自己的文件修改成别人的。</p>
<details class="folding-tag" blue><summary> chown命令用法 </summary>
              <div class='content'>
              <p>语法：chown [-R] [用户:用户组] 文件名<br>-R  对文件夹中的全部文件一并修改</p>
              </div>
            </details>
<p>chown命令举例</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> root 1.txt    <span class="comment">#可以只修改所属用户</span></span><br><span class="line"><span class="built_in">chown</span> :root 1.txt    <span class="comment">#也可以只修改所属用户组</span></span><br><span class="line"><span class="built_in">chown</span> root:root 1.txt</span><br><span class="line"><span class="built_in">chown</span> -R  root:root <span class="built_in">test</span></span><br></pre></td></tr></table></figure></div>
<h1>linux补充</h1>
<h2>软件安装部署</h2>
<h3 id="网络适配器">网络适配器</h3>
<p>虚拟机中桥接模式和NAT模式的区别：</p>
<ol>
<li>桥接模式：直接接入windows当前的网络环境，当windows本身网络不稳定时，虚拟机的网络也不稳定，容易造成虚拟机IP地址的改变</li>
<li>NAT模式：在windows系统中独立开辟一块新的网络空间供虚拟机使用，IP地址固定，无论windows是否接入外网，都可以访问虚拟机！（NAT模式仅能使windows本机和虚拟机连接，其他局域网内的也不行）</li>
</ol>
<p>更改为NAT模式：</p>
<ol>
<li>网络适配器 》选择NAT模式</li>
<li>虚拟网络编辑器 》更改设置 》VMnet8 NAT模式 》确定即可</li>
</ol>
<h3 id="重新初始化云盘">重新初始化云盘</h3>
<p>重新初始化云盘后将恢复到镜像的初始状态。<br>
云盘所挂载的ECS实例为“停止状态”才能进行该操作</p>
<h3 id="密钥对与远程连接">密钥对与远程连接</h3>
<h4 id="Workbench远程连接">Workbench远程连接</h4>
<ol>
<li>网络与安全 》密钥对 》 创建密钥对 》输入密钥对名称 》确定 》将自动下载保存<code>keyname.pem</code>密钥对文件</li>
<li>绑定密钥对 》选择要绑定当前密钥对的实例 》确定</li>
<li>重启实例 》Workbench远程连接 》 SSH 》选择证书认证 》拖拽上传密钥对文件<code>keyname.pem</code> 》连接</li>
</ol>
<h4 id="finalshell远程连接">finalshell远程连接</h4>
<ol>
<li>
<p>网络与安全 》密钥对 》 创建密钥对 》输入密钥对名称 》确定 》将自动下载保存<code>keyname.pem</code>密钥对文件</p>
</li>
<li>
<p>绑定密钥对 》选择要绑定当前密钥对的实例 》确定</p>
</li>
<li>
<p>重启实例 》finalshell新建SSH连接 》输入服务器公网IP，认证方法选择公钥，上传私钥<code>keyname.pem</code>文件 》连接</p>
</li>
<li>
<p>一定要记得密钥对文件<code>keyname.pem</code>保存在那个文件夹下面</p>
</li>
<li>
<p>阿里云目前单台云服务器只支持绑定单个密钥对。若您选择已经绑定过其他密钥对的云服务器，新绑定的密钥对将会覆盖以前绑定的密钥对。</p>
</li>
<li>
<p>绑定/解绑密钥对需要在控制台重启ECS实例才能生效</p>
</li>
<li>
<p>Workbench远程连接是通过网页可以对ECS实例进行远程控制，支持复制粘贴文本，支持多操作系统用户登录同一台实例，支持可视化查看系统文件资源。</p>
</li>
</ol>
<h3 id="安装MySQL5-7">安装MySQL5.7</h3>
<blockquote>
<p>tips：安装操作需要root权限</p>
</blockquote>
<p>由于MySQL并不在CentOS的官方仓库中，所以我们需要：</p>
<ul>
<li>导入MySQL仓库的密钥</li>
<li>配置MySQLQ的yum仓库</li>
</ul>
<ol>
<li>配置yum仓库</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新密钥</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Mysql yum库</span></span><br><span class="line">rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>使用yum安装MySQL</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yum安装Mysql</span></span><br><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>启动MySQL并配置开机自启动</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld		# 启动</span><br><span class="line">systemctl enable mysqld		# 开机自启</span><br><span class="line">systemctl status mysqld     #检查MySQL的运行状态</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>
<p>修改root密码</p>
<ul>
<li>查看MySQL的初始密码</li>
</ul>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过grep命令，在/var/log/mysqld.log文件中，过滤temporary password关键字，得到初始密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure></div>
<ul>
<li>登录</li>
</ul>
 <div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行完毕后输入刚刚得到的初始密码，即可进入MySQL数据库</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>修改root密码</li>
</ul>
 <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br></pre></td></tr></table></figure></div>
</li>
<li>
<p>扩展</p>
<ul>
<li>配置root的简单密码</li>
</ul>
 <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy<span class="operator">=</span><span class="number">0</span>;		# 密码安全级别低</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.length<span class="operator">=</span><span class="number">4</span>;		# 密码长度最低<span class="number">4</span>位即可</span><br></pre></td></tr></table></figure></div>
<ul>
<li>允许root远程登录，并设置远程登录密码</li>
</ul>
 <div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"># 第一次设置root远程登录，并配置远程密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码!&#x27;</span>;	<span class="comment">-- 密码需要符合：大于8位，有大写字母，有特殊符号，不能是连续的简单语句如123，abc</span></span><br><span class="line"></span><br><span class="line"># 后续修改密码使用如下<span class="keyword">SQL</span>命令</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure></div>
</li>
</ol>
<h3 id="安装tomcat✅">安装tomcat✅</h3>
<blockquote>
<p>tips：要安装tomcat，需要先安装JDK</p>
</blockquote>
<h4 id="下载JDK">下载JDK</h4>
<ol>
<li><a class="link"   href="https://www.oracle.com/java/technologies/downloads" >点击前往JDK下载 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>选择并下载<code>jdk-8u351-linux-x64.tar.gz</code><br>
==如果没有Oracle账户，注册一个就可以==</li>
</ol>
<h4 id="上传安装和配置JDK">上传安装和配置JDK</h4>
<ol>
<li>使用finalshell远程连接虚拟机或云服务器，<code>拖拽上传</code>刚才下载好的JDK压缩包</li>
<li>解压缩到指定目录下</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u351-linux-x64.tar.gz -C /usr/local/software/</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>创建软链接（建议）</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/software/jdk1.8.0_351   /usr/local/software/jdk</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>修改系统环境变量，将JDK的bin目录添加到PATH环境变量中。编辑<code>/etc/profile</code>文件，在末尾添加：</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/software/jdk    <span class="comment">#JDK安装路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure></div>
<p>保存后使用<code>source /etc/profile</code>命令使配置立即生效:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span>          <span class="comment">#输出PATH的值 /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/tmp/test/:/root/bin:/tmp/test/:/usr/local/software/jdk/bin</span></span><br></pre></td></tr></table></figure></div>
<div class="tip "><p>将JAVA_HOME/bin添加到PATH环境变量后，我们就可以在任意目录下执行其中的命令了</p>
</div>
<h4 id="验证JDK是否安装配置成功">验证JDK是否安装配置成功</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br><span class="line">java version <span class="string">&quot;1.8.0_351&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_351-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.351-b10, mixed mode)</span><br></pre></td></tr></table></figure></div>
<h4 id="安装tomcat">安装tomcat</h4>
<p>tomcat建议使用非Root用户安装并启动,可以创建一个用户tomcat用以部署，提高安全性。（万一网站被黑，也拿不到root权限）</p>
<ol>
<li>创建tomcat用户</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">useradd tomcat</span><br><span class="line">passwd tomcat   <span class="comment"># 可选，为tomcat用户配置密码</span></span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>直接联网下载<code>tomcat-10.0.27</code>安装包</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://dlcdn.apache.org/tomcat/tomcat-10/v10.0.27/bin/apache-tomcat-10.0.27.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>==也可以先下载再上传==</p>
<ol start="3">
<li>解压</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-10.0.27.tar.gz -C /usr/local/software</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>创建软链接（建议）</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/software/apache-tomcat-10.0.27 /usr/local/software/tomcat</span><br></pre></td></tr></table></figure></div>
<ol start="5">
<li>修改权限</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R tomcat:tomcat /usr/local/software/*tomcat* <span class="comment">#在root用户下执行 -R修改文件夹中所有文件</span></span><br></pre></td></tr></table></figure></div>
<h4 id="验证tomcat是否安装成功">验证tomcat是否安装成功</h4>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/software/</span><br><span class="line">ll</span><br><span class="line"></span><br><span class="line">总用量 157904</span><br><span class="line">drwxr-xr-x 9 root root      4096 12月  9 18:40 apache-tomcat-10.0.27</span><br><span class="line">-rw-r--r-- 1 root root  11984522 10月  3 23:53 apache-tomcat-10.0.27.tar.gz</span><br><span class="line">lrwxrwxrwx 1 root root        13 12月  9 18:05 jdk -&gt; jdk1.8.0_351/</span><br><span class="line">drwxr-xr-x 8 root root      4096 12月  9 18:01 jdk1.8.0_351</span><br><span class="line">-rw-r--r-- 1 root root 149697219 12月  9 17:58 jdk-8u351-linux-x64.tar.gz</span><br><span class="line">lrwxrwxrwx 1 root root        41 12月  9 18:40 tomcat -&gt; /usr/local/software/apache-tomcat-10.0.27</span><br></pre></td></tr></table></figure></div>
<ol>
<li>切换到tomcat用户（使用该用户去启动tomcat）</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su tomcat</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>启动tomcat</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/software/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>检查8080端口</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br><span class="line"></span><br><span class="line">tcp6   0   0  :::8080      :::*   LISTEN      32245/java </span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>浏览器访问 <code>http://虚拟机或云服务器IP:8080</code>。前提是放行防火墙放行8080端口：</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --reload   <span class="comment">#重新加载防火墙规则，使生效</span></span><br></pre></td></tr></table></figure></div>
<p>也可以直接关闭防火墙：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld		<span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld		<span class="comment"># 停止防火墙开机自启</span></span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/17/20221017223915.png"
                      alt="image-20221017223915498"
                ></p>
<blockquote>
<p>tips：如果使用的是云服务器，在控制台添加安全组规则，允许入方向0.0.0.0任何IP访问8080/8080端口即可</p>
</blockquote>
<p>刚才不经意间看到以前自己在本子上做的笔记，才一个学期，已经一点不认识了，终于明白了，学东西无论当时记得多清楚，随着时间也会忘记。而就算记在本子上，我也不会去看的。倒不如放在电脑里，放在网上。<br>
所以，不管是在本子上，还是在网上，记笔记的时候，不要非得追求笔记好看，完美，每句话考虑很久。毕竟记笔记不是为了记笔记本身。</p>
<h2>linux快捷键</h2>
<ol>
<li><strong>ctrl+C  强制停止正在运行的程序或取消正在输入的命令</strong></li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">tail</span>      <span class="comment">#直接输入tail会中断系统</span></span><br><span class="line">^C</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /a/b/c/d  <span class="comment">#ctrl+C清除输错的命令，重新输入</span></span><br><span class="line">             </span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>ctrl+D  退出账户登录或某程序的专属页面（不能退出vim编辑）</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line">         <span class="comment">#ctrl+D退出</span></span><br><span class="line">         <span class="comment">#当前用户为root</span></span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>history 查看输入过的命令列表(可结合grep对历史命令进行过滤)</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">history</span> | grep ch</span><br><span class="line">1 <span class="built_in">chown</span></span><br><span class="line">2 <span class="built_in">chmod</span> 777 test.text</span><br><span class="line">... ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>
<p>ctrl+R+内容  输入内容去匹配曾输入过的命令。回车直接执行，左右键得到命令方便修改</p>
</li>
<li>
<p>光标移动快捷键</p>
</li>
</ol>
<ul>
<li>ctrl+A  跳到命令开头</li>
<li>ctrl+E  跳到命令结尾</li>
<li>ctrl+左 向左跳一个单词</li>
<li>ctrl+右 向右跳一个单词</li>
</ul>
<ol start="6">
<li><strong>ctrl+L  清空终端内容（相当于clear命令）</strong></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>精华</tag>
      </tags>
  </entry>
</search>
